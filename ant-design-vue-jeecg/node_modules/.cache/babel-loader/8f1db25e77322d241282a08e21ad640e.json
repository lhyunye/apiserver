{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\thread-loader\\dist\\cjs.js!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JUpload.vue","mtime":1618453704900},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1605147255423},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.regexp.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from 'vue';\nimport { ACCESS_TOKEN } from \"@/store/mutation-types\";\nimport { getFileAccessHttpUrl } from '@/api/manage';\nvar FILE_TYPE_ALL = \"all\";\nvar FILE_TYPE_IMG = \"image\";\nvar FILE_TYPE_TXT = \"file\";\n\nvar uidGenerator = function uidGenerator() {\n  return '-' + parseInt(Math.random() * 10000 + 1, 10);\n};\n\nvar getFileName = function getFileName(path) {\n  if (path.lastIndexOf(\"\\\\\") >= 0) {\n    var reg = new RegExp(\"\\\\\\\\\", \"g\");\n    path = path.replace(reg, \"/\");\n  }\n\n  return path.substring(path.lastIndexOf(\"/\") + 1);\n};\n\nexport default {\n  name: 'JUpload',\n  data: function data() {\n    return {\n      uploadAction: window._CONFIG['domianURL'] + \"/sys/common/upload\",\n      urlDownload: window._CONFIG['staticDomainURL'],\n      headers: {},\n      fileList: [],\n      newFileList: []\n    };\n  },\n  props: {\n    text: {\n      type: String,\n      required: false,\n      default: \"点击上传\"\n    },\n    fileType: {\n      type: String,\n      required: false,\n      default: FILE_TYPE_ALL\n    },\n\n    /*这个属性用于控制文件上传的业务路径*/\n    bizPath: {\n      type: String,\n      required: false,\n      default: \"temp\"\n    },\n    value: {\n      type: [String, Array],\n      required: false\n    },\n    // update-begin- --- author:wangshuai ------ date:20190929 ---- for:Jupload组件增加是否能够点击\n    disabled: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n    // update-end- --- author:wangshuai ------ date:20190929 ---- for:Jupload组件增加是否能够点击\n    //此属性被废弃了\n    triggerChange: {\n      type: Boolean,\n      required: false,\n      default: false\n    },\n\n    /**\n     * update -- author:lvdandan -- date:20190219 -- for:Jupload组件增加是否返回url，\n     * true：仅返回url\n     * false：返回fileName filePath fileSize\n     */\n    returnUrl: {\n      type: Boolean,\n      required: false,\n      default: true\n    }\n  },\n  watch: {\n    value: function value(val) {\n      if (val instanceof Array) {\n        if (this.returnUrl) {\n          this.initFileList(val.join(','));\n        } else {\n          this.initFileListArr(val);\n        }\n      } else {\n        this.initFileList(val);\n      }\n    }\n  },\n  created: function created() {\n    var token = Vue.ls.get(ACCESS_TOKEN);\n    this.headers = {\n      \"X-Access-Token\": token\n    };\n  },\n  methods: {\n    initFileListArr: function initFileListArr(val) {\n      if (!val || val.length == 0) {\n        this.fileList = [];\n        return;\n      }\n\n      var fileList = [];\n\n      for (var a = 0; a < val.length; a++) {\n        fileList.push({\n          uid: uidGenerator(),\n          name: val[a].fileName,\n          status: 'done',\n          url: val[a].filePath,\n          response: {\n            status: \"history\",\n            message: val[a].filePath\n          }\n        });\n      }\n\n      this.fileList = fileList;\n    },\n    initFileList: function initFileList(paths) {\n      if (!paths || paths.length == 0) {\n        //return [];\n        // update-begin- --- author:os_chengtgen ------ date:20190729 ---- for:issues:326,Jupload组件初始化bug\n        this.fileList = [];\n        return; // update-end- --- author:os_chengtgen ------ date:20190729 ---- for:issues:326,Jupload组件初始化bug\n      }\n\n      var fileList = [];\n      var arr = paths.split(\",\");\n\n      for (var a = 0; a < arr.length; a++) {\n        var url = getFileAccessHttpUrl(arr[a], this.urlDownload, \"http\");\n        fileList.push({\n          uid: uidGenerator(),\n          name: getFileName(arr[a]),\n          status: 'done',\n          url: url,\n          response: {\n            status: \"history\",\n            message: arr[a]\n          }\n        });\n      }\n\n      this.fileList = fileList;\n    },\n    handlePathChange: function handlePathChange() {\n      var uploadFiles = this.fileList;\n      var path = '';\n\n      if (!uploadFiles || uploadFiles.length == 0) {\n        path = '';\n      }\n\n      var arr = [];\n\n      for (var a = 0; a < uploadFiles.length; a++) {\n        arr.push(uploadFiles[a].response.message);\n      }\n\n      if (arr.length > 0) {\n        path = arr.join(\",\");\n      }\n\n      this.$emit('change', path);\n    },\n    beforeUpload: function beforeUpload(file) {\n      var fileType = file.type;\n\n      if (fileType === FILE_TYPE_IMG) {\n        if (fileType.indexOf('image') < 0) {\n          this.$message.warning('请上传图片');\n          return false;\n        }\n      } else if (fileType === FILE_TYPE_TXT) {\n        if (fileType.indexOf('image') >= 0) {\n          this.$message.warning('请上传文件');\n          return false;\n        }\n      } //TODO 扩展功能验证文件大小\n\n\n      return true;\n    },\n    handleChange: function handleChange(info) {\n      var _this = this;\n\n      console.log(\"--文件列表改变--\");\n      var fileList = info.fileList;\n\n      if (info.file.status === 'done') {\n        if (info.file.response.success) {\n          fileList = fileList.map(function (file) {\n            if (file.response) {\n              var reUrl = file.response.message;\n              file.url = getFileAccessHttpUrl(reUrl, _this.urlDownload, \"http\");\n            }\n\n            return file;\n          });\n        } //this.$message.success(`${info.file.name} 上传成功!`);\n\n      } else if (info.file.status === 'error') {\n        this.$message.error(\"\".concat(info.file.name, \" \\u4E0A\\u4F20\\u5931\\u8D25.\"));\n      } else if (info.file.status === 'removed') {\n        this.handleDelete(info.file);\n      }\n\n      this.fileList = fileList;\n\n      if (info.file.status === 'done' || info.file.status === 'removed') {\n        //returnUrl为true时仅返回文件路径\n        if (this.returnUrl) {\n          this.handlePathChange();\n        } else {\n          //returnUrl为false时返回文件名称、文件路径及文件大小\n          fileList = fileList.filter(function (file) {\n            if (file.response) {\n              return file.response.success === true;\n            }\n\n            return false;\n          }).map(function (file) {\n            var fileJson = {\n              fileName: file.name,\n              filePath: file.response.message,\n              fileSize: file.size\n            };\n\n            _this.newFileList.push(fileJson);\n\n            _this.$emit('change', _this.newFileList);\n          });\n        }\n      }\n    },\n    handleDelete: function handleDelete(file) {\n      //如有需要新增 删除逻辑\n      console.log(file);\n    }\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n};",null]}