{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\thread-loader\\dist\\cjs.js!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JModal\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JModal\\index.vue","mtime":1618453704896},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1605147255423},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"E:/gitData/wangfuj/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'JModal',\n  props: {\n    title: String,\n    // 可使用 .sync 修饰符\n    visible: Boolean,\n    // 是否全屏弹窗，当全屏时无论如何都会禁止 body 滚动。可使用 .sync 修饰符\n    fullscreen: {\n      type: Boolean,\n      default: true\n    },\n    // 是否允许切换全屏（允许后右上角会出现一个按钮）\n    switchFullscreen: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      // 内部使用的 slots ，不再处理\n      usedSlots: ['title'],\n      // 实际控制是否全屏的参数\n      innerFullscreen: this.fullscreen\n    };\n  },\n  computed: {\n    // 一些未处理的参数或特殊处理的参数绑定到 a-modal 上\n    _attrs: function _attrs() {\n      var attrs = _objectSpread({}, this.$attrs); // 如果全屏就将宽度设为 100%\n\n\n      if (this.innerFullscreen) {\n        attrs['width'] = '100%';\n      }\n\n      return attrs;\n    },\n    isNoTitle: function isNoTitle() {\n      return !this.title && !this.allSlotsKeys.includes('title');\n    },\n    isNoFooter: function isNoFooter() {\n      return this._attrs['footer'] === null;\n    },\n    slotsKeys: function slotsKeys() {\n      var _this = this;\n\n      return Object.keys(this.$slots).filter(function (key) {\n        return !_this.usedSlots.includes(key);\n      });\n    },\n    scopedSlotsKeys: function scopedSlotsKeys() {\n      var _this2 = this;\n\n      return Object.keys(this.$scopedSlots).filter(function (key) {\n        return !_this2.usedSlots.includes(key);\n      });\n    },\n    allSlotsKeys: function allSlotsKeys() {\n      return this.slotsKeys.concat(this.scopedSlotsKeys);\n    },\n    // 切换全屏的按钮图标\n    fullscreenButtonIcon: function fullscreenButtonIcon() {\n      return this.innerFullscreen ? 'fullscreen' : 'fullscreen-exit';\n    }\n  },\n  watch: {\n    visible: function visible() {\n      if (this.visible) {\n        this.innerFullscreen = this.fullscreen;\n      }\n    },\n    innerFullscreen: function innerFullscreen(val) {\n      this.$emit('update:fullscreen', val);\n    }\n  },\n  methods: {\n    close: function close() {\n      this.$emit('update:visible', false);\n    },\n    handleOk: function handleOk() {\n      this.close();\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n\n    /** 切换全屏 */\n    toggleFullscreen: function toggleFullscreen() {\n      this.innerFullscreen = !this.innerFullscreen;\n    }\n  }\n};",null]}