{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JModal\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JModal\\index.vue","mtime":1618453704896},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport _defineProperty from \"E:/gitData/wangfuj/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'JModal',\n  props: {\n    title: String,\n    // 可使用 .sync 修饰符\n    visible: Boolean,\n    // 是否全屏弹窗，当全屏时无论如何都会禁止 body 滚动。可使用 .sync 修饰符\n    fullscreen: {\n      type: Boolean,\n      default: true\n    },\n    // 是否允许切换全屏（允许后右上角会出现一个按钮）\n    switchFullscreen: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      // 内部使用的 slots ，不再处理\n      usedSlots: ['title'],\n      // 实际控制是否全屏的参数\n      innerFullscreen: this.fullscreen\n    };\n  },\n  computed: {\n    // 一些未处理的参数或特殊处理的参数绑定到 a-modal 上\n    _attrs: function _attrs() {\n      var attrs = _objectSpread({}, this.$attrs); // 如果全屏就将宽度设为 100%\n\n\n      if (this.innerFullscreen) {\n        attrs['width'] = '100%';\n      }\n\n      return attrs;\n    },\n    isNoTitle: function isNoTitle() {\n      return !this.title && !this.allSlotsKeys.includes('title');\n    },\n    isNoFooter: function isNoFooter() {\n      return this._attrs['footer'] === null;\n    },\n    slotsKeys: function slotsKeys() {\n      var _this = this;\n\n      return Object.keys(this.$slots).filter(function (key) {\n        return !_this.usedSlots.includes(key);\n      });\n    },\n    scopedSlotsKeys: function scopedSlotsKeys() {\n      var _this2 = this;\n\n      return Object.keys(this.$scopedSlots).filter(function (key) {\n        return !_this2.usedSlots.includes(key);\n      });\n    },\n    allSlotsKeys: function allSlotsKeys() {\n      return this.slotsKeys.concat(this.scopedSlotsKeys);\n    },\n    // 切换全屏的按钮图标\n    fullscreenButtonIcon: function fullscreenButtonIcon() {\n      return this.innerFullscreen ? 'fullscreen' : 'fullscreen-exit';\n    }\n  },\n  watch: {\n    visible: function visible() {\n      if (this.visible) {\n        this.innerFullscreen = this.fullscreen;\n      }\n    },\n    innerFullscreen: function innerFullscreen(val) {\n      this.$emit('update:fullscreen', val);\n    }\n  },\n  methods: {\n    close: function close() {\n      this.$emit('update:visible', false);\n    },\n    handleOk: function handleOk() {\n      this.close();\n    },\n    handleCancel: function handleCancel() {\n      this.close();\n    },\n\n    /** 切换全屏 */\n    toggleFullscreen: function toggleFullscreen() {\n      this.innerFullscreen = !this.innerFullscreen;\n    }\n  }\n};",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA,MADA;AAEA;AACA,IAAA,OAAA,EAAA,OAHA;AAIA;AACA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KALA;AASA;AACA,IAAA,gBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA;AAVA,GAFA;AAiBA,EAAA,IAjBA,kBAiBA;AACA,WAAA;AACA;AACA,MAAA,SAAA,EAAA,CAAA,OAAA,CAFA;AAGA;AACA,MAAA,eAAA,EAAA,KAAA;AAJA,KAAA;AAMA,GAxBA;AAyBA,EAAA,QAAA,EAAA;AACA;AACA,IAAA,MAFA,oBAEA;AACA,UAAA,KAAA,qBAAA,KAAA,MAAA,CAAA,CADA,CAEA;;;AACA,UAAA,KAAA,eAAA,EAAA;AACA,QAAA,KAAA,CAAA,OAAA,CAAA,GAAA,MAAA;AACA;;AACA,aAAA,KAAA;AACA,KATA;AAUA,IAAA,SAVA,uBAUA;AACA,aAAA,CAAA,KAAA,KAAA,IAAA,CAAA,KAAA,YAAA,CAAA,QAAA,CAAA,OAAA,CAAA;AACA,KAZA;AAaA,IAAA,UAbA,wBAaA;AACA,aAAA,KAAA,MAAA,CAAA,QAAA,MAAA,IAAA;AACA,KAfA;AAgBA,IAAA,SAhBA,uBAgBA;AAAA;;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,KAAA,MAAA,EAAA,MAAA,CAAA,UAAA,GAAA;AAAA,eAAA,CAAA,KAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA;AAAA,OAAA,CAAA;AACA,KAlBA;AAmBA,IAAA,eAnBA,6BAmBA;AAAA;;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,KAAA,YAAA,EAAA,MAAA,CAAA,UAAA,GAAA;AAAA,eAAA,CAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,GAAA,CAAA;AAAA,OAAA,CAAA;AACA,KArBA;AAsBA,IAAA,YAtBA,0BAsBA;AACA,aAAA,KAAA,SAAA,CAAA,MAAA,CAAA,KAAA,eAAA,CAAA;AACA,KAxBA;AAyBA;AACA,IAAA,oBA1BA,kCA0BA;AACA,aAAA,KAAA,eAAA,GAAA,YAAA,GAAA,iBAAA;AACA;AA5BA,GAzBA;AAuDA,EAAA,KAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,UAAA,KAAA,OAAA,EAAA;AACA,aAAA,eAAA,GAAA,KAAA,UAAA;AACA;AACA,KALA;AAMA,IAAA,eANA,2BAMA,GANA,EAMA;AACA,WAAA,KAAA,CAAA,mBAAA,EAAA,GAAA;AACA;AARA,GAvDA;AAiEA,EAAA,OAAA,EAAA;AAEA,IAAA,KAFA,mBAEA;AACA,WAAA,KAAA,CAAA,gBAAA,EAAA,KAAA;AACA,KAJA;AAMA,IAAA,QANA,sBAMA;AACA,WAAA,KAAA;AACA,KARA;AASA,IAAA,YATA,0BASA;AACA,WAAA,KAAA;AACA,KAXA;;AAaA;AACA,IAAA,gBAdA,8BAcA;AACA,WAAA,eAAA,GAAA,CAAA,KAAA,eAAA;AACA;AAhBA;AAjEA,CAAA","sourcesContent":["<template>\r\n  <a-modal\r\n    ref=\"modal\"\r\n    class=\"j-modal-box\"\r\n    :class=\"{'fullscreen':innerFullscreen,'no-title':isNoTitle,'no-footer':isNoFooter,}\"\r\n    :visible=\"visible\"\r\n    v-bind=\"_attrs\"\r\n    v-on=\"$listeners\"\r\n    @ok=\"handleOk\"\r\n    @cancel=\"handleCancel\"\r\n  >\r\n\r\n    <slot></slot>\r\n\r\n    <template v-if=\"!isNoTitle\" slot=\"title\">\r\n      <a-row class=\"j-modal-title-row\" type=\"flex\">\r\n        <a-col class=\"left\">\r\n          <slot name=\"title\">{{ title }}</slot>\r\n        </a-col>\r\n        <a-col v-if=\"switchFullscreen\" class=\"right\" @click=\"toggleFullscreen\">\r\n          <a-button class=\"ant-modal-close ant-modal-close-x\" ghost type=\"link\" :icon=\"fullscreenButtonIcon\"/>\r\n        </a-col>\r\n      </a-row>\r\n    </template>\r\n\r\n    <!-- 处理 scopedSlots -->\r\n    <template v-for=\"slotName of scopedSlotsKeys\" :slot=\"slotName\">\r\n      <slot :name=\"slotName\"></slot>\r\n    </template>\r\n\r\n    <!-- 处理 slots -->\r\n    <template v-for=\"slotName of slotsKeys\" v-slot:[slotName]>\r\n      <slot :name=\"slotName\"></slot>\r\n    </template>\r\n\r\n  </a-modal>\r\n</template>\r\n\r\n<script>\r\n\r\n  export default {\r\n    name: 'JModal',\r\n    props: {\r\n      title: String,\r\n      // 可使用 .sync 修饰符\r\n      visible: Boolean,\r\n      // 是否全屏弹窗，当全屏时无论如何都会禁止 body 滚动。可使用 .sync 修饰符\r\n      fullscreen: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      // 是否允许切换全屏（允许后右上角会出现一个按钮）\r\n      switchFullscreen: {\r\n        type: Boolean,\r\n        default: false\r\n      },\r\n    },\r\n    data() {\r\n      return {\r\n        // 内部使用的 slots ，不再处理\r\n        usedSlots: ['title'],\r\n        // 实际控制是否全屏的参数\r\n        innerFullscreen: this.fullscreen,\r\n      }\r\n    },\r\n    computed: {\r\n      // 一些未处理的参数或特殊处理的参数绑定到 a-modal 上\r\n      _attrs() {\r\n        let attrs = { ...this.$attrs }\r\n        // 如果全屏就将宽度设为 100%\r\n        if (this.innerFullscreen) {\r\n          attrs['width'] = '100%'\r\n        }\r\n        return attrs\r\n      },\r\n      isNoTitle() {\r\n        return !this.title && !this.allSlotsKeys.includes('title')\r\n      },\r\n      isNoFooter() {\r\n        return this._attrs['footer'] === null\r\n      },\r\n      slotsKeys() {\r\n        return Object.keys(this.$slots).filter(key => !this.usedSlots.includes(key))\r\n      },\r\n      scopedSlotsKeys() {\r\n        return Object.keys(this.$scopedSlots).filter(key => !this.usedSlots.includes(key))\r\n      },\r\n      allSlotsKeys() {\r\n        return this.slotsKeys.concat(this.scopedSlotsKeys)\r\n      },\r\n      // 切换全屏的按钮图标\r\n      fullscreenButtonIcon() {\r\n        return this.innerFullscreen ? 'fullscreen' : 'fullscreen-exit'\r\n      },\r\n    },\r\n    watch: {\r\n      visible() {\r\n        if (this.visible) {\r\n          this.innerFullscreen = this.fullscreen\r\n        }\r\n      },\r\n      innerFullscreen(val) {\r\n        this.$emit('update:fullscreen', val)\r\n      },\r\n    },\r\n    methods: {\r\n\r\n      close() {\r\n        this.$emit('update:visible', false)\r\n      },\r\n\r\n      handleOk() {\r\n        this.close()\r\n      },\r\n      handleCancel() {\r\n        this.close()\r\n      },\r\n\r\n      /** 切换全屏 */\r\n      toggleFullscreen() {\r\n        this.innerFullscreen = !this.innerFullscreen\r\n      },\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style lang=\"less\">\r\n  .j-modal-box {\r\n\r\n    &.fullscreen {\r\n      top: 0;\r\n      left: 0;\r\n      padding: 0;\r\n\r\n      height: 100vh;\r\n\r\n      & .ant-modal-content {\r\n        height: 100vh;\r\n        border-radius: 0;\r\n\r\n        & .ant-modal-body {\r\n          /* title 和 footer 各占 55px */\r\n          height: calc(100% - 55px - 55px);\r\n          overflow: auto;\r\n        }\r\n      }\r\n\r\n      &.no-title, &.no-footer {\r\n        .ant-modal-body {\r\n          height: calc(100% - 55px);\r\n        }\r\n      }\r\n\r\n      &.no-title.no-footer {\r\n        .ant-modal-body {\r\n          height: 100%;\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    .j-modal-title-row {\r\n      .left {\r\n        width: calc(100% - 56px - 56px);\r\n      }\r\n\r\n      .right {\r\n        width: 56px;\r\n\r\n        .ant-modal-close {\r\n          right: 56px;\r\n          color: rgba(0, 0, 0, 0.45);\r\n\r\n          &:hover {\r\n            color: rgba(0, 0, 0, 0.75);\r\n          }\r\n\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n</style>"],"sourceRoot":"src/components/jeecg/JModal"}]}