{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\thread-loader\\dist\\cjs.js!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\views\\modules\\online\\cgform\\util\\TableUtils.js","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\views\\modules\\online\\cgform\\util\\TableUtils.js","mtime":1618453704982},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1605147255423},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1605147242017}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _asyncToGenerator from \"E:/gitData/wangfuj/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\r\n * 同步列表，可以同步新增、修改、删除\r\n * @author sunjianlei\r\n * */\nexport function syncAllTable(_x, _x2) {\n  return _syncAllTable.apply(this, arguments);\n}\n/**\r\n * 将数据分类并Set进dataSource\r\n * @author sunjianlei\r\n **/\n\nfunction _syncAllTable() {\n  _syncAllTable = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(vm, table1) {\n    var deleteIds, table1Value;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            vm.$refs.editableTable.resetScrollTop();\n            deleteIds = table1.$refs.editableTable.getDeleteIds();\n            _context.next = 4;\n            return table1.$refs.editableTable.getValuesPromise(false).then(function (values) {\n              table1Value = values;\n              return vm.$refs.editableTable.getValuesPromise(false);\n            }).then(function (values) {\n              table1Value.forEach(function (value) {\n                var flag = false;\n                values.forEach(function (thisValue) {\n                  if (value.id === thisValue.id) {\n                    // 判断是否修改了值\n                    var dbFieldName = thisValue['dbFieldName'];\n                    var dbFieldTxt = thisValue['dbFieldTxt']; // return\n\n                    if (value.dbFieldName !== dbFieldName || value.dbFieldTxt !== dbFieldTxt) {\n                      // 修改了\n                      vm.$refs.editableTable.setValues([{\n                        rowKey: thisValue.id,\n                        values: {\n                          dbFieldName: value.dbFieldName,\n                          dbFieldTxt: value.dbFieldTxt\n                        }\n                      }]);\n                    }\n\n                    flag = true;\n                  } else {\n                    // id不匹配则有可能是新增也有可能是删除了的\n                    // 遍历传进来的 deleteIds 进行对比\n                    deleteIds.forEach(function (delId) {\n                      // 对比成功，则删除该条数据\n                      if (delId === thisValue.id) {\n                        vm.$refs.editableTable.removeRows(vm.$refs.editableTable.caseId + delId);\n                        flag = true;\n                      }\n                    });\n                  }\n                }); // return\n                // 判断是否操作了该条数据，若没有操作则代表要执行新增操作\n\n                if (!flag) {\n                  var record = Object.assign({}, value);\n                  vm.columns.forEach(function (column) {\n                    if (column.dataIndex !== 'dbFieldName' && column.dataIndex !== 'dbFieldTxt') {\n                      record[column.dataIndex] = column.defaultValue;\n                    }\n                  });\n                  vm.$refs.editableTable.push(record);\n                }\n              });\n            });\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _syncAllTable.apply(this, arguments);\n}\n\nexport function setDataSource(vm, queryData) {\n  var dataSource = []; // 遍历查询出来的数据\n\n  queryData.forEach(function (value) {\n    var data = {\n      id: value['id']\n    };\n    vm.columns.forEach(function (column) {\n      var key = column.key;\n\n      if (key) {\n        data[key] = value[key]; // 由于多选下拉框返回的是一个数组，所以需要改成 [1,2,3] 数组的形式，否则组件不识别\n        // if (key === 'indexField') {\n        //   data[key] = value[key].split(',')\n        // }\n      }\n    });\n    dataSource.push(data);\n  });\n  vm.dataSource = dataSource;\n}\n/** 获取主表的初始化数据 */\n\nexport function getMasterTableInitialData() {\n  return [{\n    dbFieldName: 'id',\n    dbFieldTxt: '主键',\n    dbLength: 36,\n    dbPointLength: 0,\n    dbDefaultVal: '',\n    dbType: 'string',\n    dbIsKey: '1',\n    dbIsNull: '0',\n    // table2\n    isShowForm: '0',\n    isShowList: '0',\n    isReadOnly: '1',\n    fieldShowType: 'text',\n    fieldLength: '120',\n    queryMode: 'single',\n    orderNum: 1\n  }, {\n    dbFieldName: 'create_by',\n    dbFieldTxt: '创建人',\n    dbLength: 50,\n    dbPointLength: 0,\n    dbDefaultVal: '',\n    dbType: 'string',\n    dbIsKey: '0',\n    dbIsNull: '1',\n    // table2\n    isShowForm: '0',\n    isShowList: '0',\n    fieldShowType: 'text',\n    fieldLength: '120',\n    queryMode: 'single',\n    orderNum: 2\n  }, {\n    dbFieldName: 'create_time',\n    dbFieldTxt: '创建日期',\n    dbLength: 20,\n    dbPointLength: 0,\n    dbDefaultVal: '',\n    dbType: 'Date',\n    dbIsKey: '0',\n    dbIsNull: '1',\n    // table2\n    isShowForm: '0',\n    isShowList: '0',\n    fieldShowType: 'datetime',\n    fieldLength: '120',\n    queryMode: 'single',\n    orderNum: 3\n  }, {\n    dbFieldName: 'update_by',\n    dbFieldTxt: '更新人',\n    dbLength: 50,\n    dbPointLength: 0,\n    dbDefaultVal: '',\n    dbType: 'string',\n    dbIsKey: '0',\n    dbIsNull: '1',\n    // table2\n    isShowForm: '0',\n    isShowList: '0',\n    fieldShowType: 'text',\n    fieldLength: '120',\n    queryMode: 'single',\n    orderNum: 4\n  }, {\n    dbFieldName: 'update_time',\n    dbFieldTxt: '更新日期',\n    dbLength: 20,\n    dbPointLength: 0,\n    dbDefaultVal: '',\n    dbType: 'Date',\n    dbIsKey: '0',\n    dbIsNull: '1',\n    // table2\n    isShowForm: '0',\n    isShowList: '0',\n    fieldShowType: 'datetime',\n    fieldLength: '120',\n    queryMode: 'single',\n    orderNum: 5\n  }, {\n    dbFieldName: 'sys_org_code',\n    dbFieldTxt: '所属部门',\n    dbLength: 64,\n    dbPointLength: 0,\n    dbDefaultVal: '',\n    dbType: 'string',\n    dbIsKey: '0',\n    dbIsNull: '1',\n    // table2\n    isShowForm: '0',\n    isShowList: '0',\n    fieldShowType: 'text',\n    fieldLength: '120',\n    queryMode: 'single',\n    orderNum: 6\n  } // {\n  //   dbFieldName: 'sys_org_code',\n  //   dbFieldTxt: '所属部门',\n  //   dbLength: 50,\n  //   dbPointLength: 0,\n  //   dbDefaultVal: '',\n  //   dbType: 'string',\n  //   dbIsKey: false,\n  //   dbIsNull: true\n  // }, {\n  //   dbFieldName: 'sys_company_code',\n  //   dbFieldTxt: '所属公司',\n  //   dbLength: 50,\n  //   dbPointLength: 0,\n  //   dbDefaultVal: '',\n  //   dbType: 'string',\n  //   dbIsKey: false,\n  //   dbIsNull: true\n  // }, {\n  //   dbFieldName: 'bpm_status',\n  //   dbFieldTxt: '流程状态',\n  //   dbLength: 32,\n  //   dbPointLength: 0,\n  //   dbDefaultVal: '',\n  //   dbType: 'string',\n  //   dbIsKey: false,\n  //   dbIsNull: true\n  // }\n  ];\n}\n/** 获取树的初始化数据 */\n\nexport function getTreeNeedFields() {\n  return [{\n    dbFieldName: 'pid',\n    dbFieldTxt: '父级节点',\n    dbLength: 32,\n    dbPointLength: 0,\n    dbDefaultVal: '',\n    dbType: 'string',\n    dbIsKey: '0',\n    dbIsNull: '1',\n    // table2\n    isShowForm: '1',\n    isShowList: '0',\n    fieldShowType: 'text',\n    fieldLength: '120',\n    queryMode: 'single',\n    orderNum: 7\n  }, {\n    dbFieldName: 'has_child',\n    dbFieldTxt: '是否有子节点',\n    dbLength: 3,\n    dbPointLength: 0,\n    dbDefaultVal: '',\n    dbType: 'string',\n    dbIsKey: '0',\n    dbIsNull: '1',\n    // table2\n    isShowForm: '0',\n    isShowList: '0',\n    fieldShowType: 'list',\n    fieldLength: '120',\n    queryMode: 'single',\n    orderNum: 8,\n    // table3\n    dictField: \"yn\"\n  }];\n}",null]}