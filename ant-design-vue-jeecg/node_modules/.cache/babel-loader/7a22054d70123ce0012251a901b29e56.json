{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\thread-loader\\dist\\cjs.js!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\views\\modules\\online\\cgreport\\auto\\OnlCgreportAutoList.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\views\\modules\\online\\cgreport\\auto\\OnlCgreportAutoList.vue","mtime":1618453704985},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1605147255423},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.number.constructor\";\nimport _toConsumableArray from \"E:/gitData/wangfuj/jeecg-boot/ant-design-vue-jeecg/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { HrefJump } from '@/mixins/OnlAutoListMixin';\nimport { getAction, downFile } from '@/api/manage';\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil';\nimport { filterObj } from '@/utils/util';\nexport default {\n  name: 'OnlCgreportAutoList',\n  mixins: [HrefJump],\n  components: {},\n  data: function data() {\n    return {\n      // 查询参数\n      queryInfo: [],\n      // 查询参数，多个页面的查询参数用 code 作为键来区分\n      queryParamsMap: {},\n      selfParam: {},\n      sorter: {\n        column: '',\n        order: 'desc'\n      },\n      dictOptions: {},\n      toggleSearchStatus: false,\n      // 高级搜索 展开/关闭\n      reportCode: '',\n      description: '在线报表功能测试页面',\n      url: {\n        getColumnsAndData: '/online/cgreport/api/getColumnsAndData/',\n        getQueryInfo: '/online/cgreport/api/getQueryInfo/',\n        getParamsInfo: '/online/cgreport/api/getParamsInfo/'\n      },\n      table: {\n        loading: true,\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        scroll: {\n          x: false\n        },\n        // 分页参数\n        pagination: {\n          current: 1,\n          pageSize: 10,\n          pageSizeOptions: ['10', '20', '30'],\n          showTotal: function showTotal(total, range) {\n            return range[0] + '-' + range[1] + ' 共' + total + '条';\n          },\n          showQuickJumper: true,\n          showSizeChanger: true,\n          total: 0\n        }\n      },\n      cgreportHeadName: \"\"\n    };\n  },\n  mounted: function mounted() {\n    this.initParamsInfo();\n    this.initQueryInfo();\n  },\n  watch: {\n    '$route': function $route() {\n      // 刷新参数放到这里去触发，就可以刷新相同界面了\n      this.initParamsInfo();\n      this.initQueryInfo();\n    }\n  },\n  computed: {\n    queryParam: {\n      get: function get() {\n        return this.queryParamsMap[this.reportCode];\n      },\n      set: function set(newVal) {\n        this.$set(this.queryParamsMap, this.reportCode, newVal);\n      }\n    }\n  },\n  methods: {\n    initParamsInfo: function initParamsInfo() {\n      var _this = this;\n\n      if (!this.$route.params.code) {\n        return false;\n      } //获取报表ID\n\n\n      this.reportCode = this.$route.params.code;\n\n      if (!this.queryParam) {\n        this.queryParam = {};\n      }\n\n      this.selfParam = {};\n      getAction(\"\".concat(this.url.getParamsInfo).concat(this.reportCode)).then(function (res) {\n        if (res.success) {\n          if (res.result && res.result.length > 0) {\n            var _iterator = _createForOfIteratorHelper(res.result),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var i = _step.value;\n                _this.selfParam['self_' + i.paramName] = !_this.$route.query[i.paramName] ? \"\" : _this.$route.query[i.paramName];\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n          }\n        } else {\n          _this.$message.warning(res.message);\n        }\n\n        _this.loadData();\n      });\n    },\n    initQueryInfo: function initQueryInfo() {\n      var _this2 = this;\n\n      if (!this.reportCode) {\n        return false;\n      }\n\n      getAction(\"\".concat(this.url.getQueryInfo).concat(this.reportCode)).then(function (res) {\n        console.log(\"获取查询条件\", res);\n\n        if (res.success) {\n          _this2.queryInfo = res.result;\n        } else {\n          _this2.$message.warning(res.message);\n        }\n      });\n    },\n    loadData: function loadData(arg) {\n      var _this3 = this;\n\n      if (!this.reportCode) {\n        return false;\n      }\n\n      if (arg == 1) {\n        this.table.pagination.current = 1;\n      }\n\n      var params = this.getQueryParams(); //查询条件\n\n      console.log(params); //获取报表ID\n\n      console.log(' 动态报表 reportCode ： ' + this.reportCode);\n      this.table.loading = true;\n      getAction(\"\".concat(this.url.getColumnsAndData).concat(this.reportCode), params).then(function (res) {\n        if (res.success) {\n          var _res$result = res.result,\n              data = _res$result.data,\n              columns = _res$result.columns,\n              cgreportHeadName = _res$result.cgreportHeadName,\n              dictOptions = _res$result.dictOptions,\n              fieldHrefSlots = _res$result.fieldHrefSlots;\n          var columnWidth = 230;\n          _this3.dictOptions = dictOptions;\n\n          for (var a = 0; a < columns.length; a++) {\n            if (columns[a].customRender) {\n              (function () {\n                var field_name = columns[a].customRender;\n\n                columns[a].customRender = function (t) {\n                  return t ? filterMultiDictText(_this3.dictOptions[field_name], t + '') : t;\n                };\n              })();\n            }\n\n            columns.width = columnWidth;\n          }\n\n          _this3.table.scroll.x = columns.length * columnWidth;\n          _this3.table.columns = _toConsumableArray(columns);\n          _this3.cgreportHeadName = cgreportHeadName;\n          _this3.fieldHrefSlots = fieldHrefSlots;\n\n          if (data) {\n            _this3.table.pagination.total = Number(data.total);\n            _this3.table.dataSource = data.records;\n          } else {\n            _this3.table.pagination.total = 0;\n            _this3.table.dataSource = [];\n          }\n        } else {\n          _this3.$message.warn('查询失败：' + res.message);\n        }\n      }).catch(function (e) {\n        console.error(e);\n\n        _this3.$message.error('查询失败');\n      }).finally(function () {\n        _this3.table.loading = false;\n      });\n    },\n    getQueryParams: function getQueryParams() {\n      var param = Object.assign({}, this.queryParam, this.sorter, this.selfParam);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      return filterObj(param);\n    },\n    searchByQuery: function searchByQuery() {\n      this.loadData(1);\n    },\n    searchReset: function searchReset() {\n      this.queryParam = {};\n      this.loadData(1);\n    },\n    handleToggleSearch: function handleToggleSearch() {\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    exportExcel: function exportExcel() {\n      var _this4 = this;\n\n      var fileName = this.cgreportHeadName;\n      var selfParam = {};\n\n      for (var queryName in this.$route.query) {\n        if (this.$route.query.hasOwnProperty(queryName)) {\n          var value = this.$route.query[queryName];\n          selfParam['self_' + queryName] = value || '';\n        }\n      }\n\n      downFile(\"/online/cgreport/api/exportXls/\".concat(this.reportCode), Object.assign(selfParam, this.queryParam)).then(function (data) {\n        if (!data) {\n          _this4.$message.warning(\"文件下载失败\");\n\n          return;\n        }\n\n        if (typeof window.navigator.msSaveBlob !== 'undefined') {\n          window.navigator.msSaveBlob(new Blob([data]), fileName + '.xls');\n        } else {\n          var url = window.URL.createObjectURL(new Blob([data]));\n          var link = document.createElement('a');\n          link.style.display = 'none';\n          link.href = url;\n          link.setAttribute('download', fileName + '.xls');\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link); //下载完成移除元素\n\n          window.URL.revokeObjectURL(url); //释放掉blob对象\n        }\n      });\n    },\n    handleChangeInTableSelect: function handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      this.table.selectedRowKeys = selectedRowKeys;\n      this.table.selectionRows = selectionRows;\n    },\n    handleChangeInTable: function handleChangeInTable(pagination, filters, sorter) {\n      //分页、排序、筛选变化时触发\n      if (Object.keys(sorter).length > 0) {\n        this.sorter.column = sorter.field;\n        this.sorter.order = 'ascend' == sorter.order ? 'asc' : 'desc';\n      } else {\n        this.sorter.column = null;\n        this.sorter.order = null;\n      }\n\n      this.table.pagination = pagination;\n      this.loadData();\n    }\n  }\n};",null]}