{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditableTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JEditableTable.vue","mtime":1618453704894},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Vue from 'vue'\nimport Draggable from 'vuedraggable'\nimport { ACCESS_TOKEN } from '@/store/mutation-types'\nimport { FormTypes, VALIDATE_NO_PASSED } from '@/utils/JEditableTableUtil'\nimport { cloneObject, randomString } from '@/utils/util'\nimport JDate from '@/components/jeecg/JDate'\nimport { initDictOptions } from '@/components/dict/JDictSelectUtil'\n\n\n// 行高，需要在实例加载完成前用到\nlet rowHeight = 61\n\nexport default {\n  name: 'JEditableTable',\n  components: { JDate, Draggable },\n  props: {\n    // 列信息\n    columns: {\n      type: Array,\n      required: true\n    },\n    // 数据源\n    dataSource: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    // 是否显示操作按钮\n    actionButton: {\n      type: Boolean,\n      default: false\n    },\n    // 是否显示行号\n    rowNumber: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可选择行\n    rowSelection: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n    // 页面是否在加载中\n    maxHeight: {\n      type: Number,\n      default: 400\n    },\n    // 要禁用的行\n    disabledRows: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    // 是否禁用全部组件\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // 是否可拖拽排序\n    dragSort: {\n      type: Boolean,\n      default: false\n    },\n    dragSortKey: {\n      type: String,\n      default: 'orderNum'\n    },\n  },\n  data() {\n    return {\n      // caseId，用于防止有多个实例的时候会冲突\n      caseId: `_jet-${randomString(6)}-`,\n      // 存储document element 对象\n      el: {\n        inputTable: null,\n        tbody: null\n      },\n      // 存储各个div的style\n      style: {\n        // 'max-height': '400px'\n        tbody: { left: '0px' },\n        // 左侧固定td的style\n        tdLeft: { 'min-width': '4%', 'max-width': '45px' },\n        tdLeftDs: { 'min-width': '30px', 'max-width': '35px' },\n      },\n      // 表单的类型\n      formTypes: FormTypes,\n      // 行数据\n      rows: [],\n      // 行高，height + padding + border\n      rowHeight,\n      // 滚动条顶部距离\n      scrollTop: 0,\n      // 绑定 select 的值\n      selectValues: {},\n      // 绑定 checkbox 的值\n      checkboxValues: {},\n      // 绑定 jdate 的值\n      jdateValues: {},\n      // 绑定插槽数据\n      slotValues: {},\n      // file 信息\n      uploadValues: {},\n      //popup信息\n      popupValues: {},\n\n      radioValues: {},\n      metaCheckboxValues: {},\n      multiSelectValues: {},\n      searchSelectValues: {},\n      // 绑定左侧选择框已选择的id\n      selectedRowIds: [],\n      // 存储被删除行的id\n      deleteIds: [],\n      // 存储显示tooltip的信息\n      tooltips: {},\n      // 存储没有通过验证的inputId\n      notPassedIds: []\n    }\n  },\n  created() {\n    this.inputValues = []\n    // 当前显示的tr\n    this.visibleTrEls = []\n    this.disabledRowIds = (this.disabledRowIds || [])\n  },\n  // 计算属性\n  computed: {\n    // expandHeight = rows.length * rowHeight\n    getExpandHeight() {\n      return this.rows.length * this.rowHeight\n    },\n    // 获取是否选择了部分\n    getSelectIndeterminate() {\n      return (this.selectedRowIds.length > 0 &&\n        this.selectedRowIds.length < this.rows.length)\n    },\n    // 获取是否选择了全部\n    getSelectAll() {\n      return (this.selectedRowIds.length === this.rows.length) && this.rows.length > 0\n    },\n    tbodyStyle() {\n      let style = Object.assign({}, this.style.tbody)\n      // style['max-height'] = `${this.maxHeight}px`\n      style['width'] = this.realTrWidth\n      return style\n    },\n    showClearSelectButton() {\n      let count = 0\n      for (let key in this.disabledRows) {\n        if (this.disabledRows.hasOwnProperty(key)) count++\n      }\n      return count > 0\n    },\n    accessToken() {\n      return Vue.ls.get(ACCESS_TOKEN)\n    },\n    realTrWidth() {\n      let calcWidth = 'calc('\n      this.columns.forEach((column, i) => {\n        let { type, width } = column\n        // 隐藏字段不参与计算\n        if (type !== FormTypes.hidden) {\n          if (typeof width === 'number') {\n            calcWidth += width + 'px'\n          } else if (typeof width === 'string') {\n            calcWidth += width\n          } else {\n            calcWidth += '120px'\n          }\n\n          if (i < this.columns.length - 1) {\n            calcWidth += ' + '\n          }\n        }\n      })\n      calcWidth += ')'\n      // console.log('calcWidth: ', calcWidth)\n      return calcWidth\n    }\n  },\n  // 侦听器\n  watch: {\n    rows: {\n      immediate: true,\n      handler(val, old) {\n        // val.forEach(item => {\n        //   for (let inputValue of  this.inputValues) {\n        //     if (inputValue.id === item.id) {\n        //       item['dbFieldName'] = inputValue['dbFieldName']\n        //       break\n        //     }\n        //   }\n        // })\n        // console.log('watch.rows:', cloneObject({ val, old }))\n      }\n    },\n    dataSource: {\n      immediate: true,\n      handler: function (newValue) {\n        // 兼容IE\n        this.getElementPromise('tbody').then(() => {\n\n          this.initialize()\n\n          let rows = []\n          let checkboxValues = {}\n          let selectValues = {}\n          let jdateValues = {}\n          let slotValues = {}\n          let uploadValues = {}\n          let popupValues = {}\n          let radioValues = {}\n          let multiSelectValues = {}\n          let searchSelectValues = {}\n\n          // 禁用行的id\n          let disabledRowIds = (this.disabledRowIds || [])\n          newValue.forEach((data, newValueIndex) => {\n            // 判断源数据是否带有id\n            if (data.id == null || data.id === '') {\n              data.id = this.removeCaseId(this.generateId() + newValueIndex)\n            }\n\n            let value = { id: this.caseId + data.id }\n            let row = { id: value.id }\n            let disabled = false\n            this.columns.forEach(column => {\n              let inputId = column.key + value.id\n              let sourceValue = (data[column.key] == null ? '' : data[column.key]).toString()\n              if (column.type === FormTypes.checkbox) {\n\n                // 判断是否设定了customValue（自定义值）\n                if (column.customValue instanceof Array) {\n                  let customValue = (column.customValue[0] || '').toString()\n                  checkboxValues[inputId] = (sourceValue === customValue)\n                } else {\n                  checkboxValues[inputId] = sourceValue\n                }\n\n              } else if (column.type === FormTypes.select) {\n                if (sourceValue) {\n                  // 判断是否是多选\n                  selectValues[inputId] = (column.props || {})['mode'] === 'multiple' ? sourceValue.split(',') : sourceValue\n                } else {\n                  selectValues[inputId] = undefined\n                }\n\n              } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n                jdateValues[inputId] = sourceValue\n\n              } else if (column.type === FormTypes.slot) {\n                if (sourceValue !== 0 && !sourceValue) {\n                  slotValues[inputId] = column.defaultValue\n                } else {\n                  slotValues[inputId] = sourceValue\n                }\n\n              } else if (column.type === FormTypes.popup) {\n                popupValues[inputId] = sourceValue\n              } else if (column.type === FormTypes.radio) {\n                radioValues[inputId] = sourceValue\n              } else if (column.type === FormTypes.sel_search) {\n                searchSelectValues[inputId] = sourceValue\n              } else if (column.type === FormTypes.list_multi) {\n                if (sourceValue.length > 0) {\n                  multiSelectValues[inputId] = sourceValue.split(',')\n                } else {\n                  multiSelectValues[inputId] = []\n                }\n              } else if (column.type === FormTypes.upload || column.type === FormTypes.file || column.type === FormTypes.image) {\n                if (sourceValue) {\n                  let fileName = sourceValue.substring(sourceValue.lastIndexOf('/') + 1)\n                  uploadValues[inputId] = {\n                    name: fileName,\n                    status: 'done',\n                    path: sourceValue\n                  }\n                }\n              } else {\n                value[column.key] = sourceValue\n              }\n\n              // 解析disabledRows\n              for (let columnKey in this.disabledRows) {\n                // 判断是否有该属性\n                if (this.disabledRows.hasOwnProperty(columnKey) && data.hasOwnProperty(columnKey)) {\n                  if (disabled !== true) {\n                    let temp = this.disabledRows[columnKey]\n                    // 禁用规则可以是一个数组\n                    if (temp instanceof Array) {\n                      disabled = temp.includes(data[columnKey])\n                    } else {\n                      disabled = (temp === data[columnKey])\n                    }\n                    if (disabled) {\n                      disabledRowIds.push(row.id)\n                    }\n                  }\n                }\n              }\n            })\n            this.inputValues.push(value)\n            rows.push(row)\n          })\n          this.disabledRowIds = disabledRowIds\n          this.checkboxValues = checkboxValues\n          this.selectValues = selectValues\n          this.jdateValues = jdateValues\n          this.slotValues = slotValues\n          this.rows = rows\n          this.uploadValues = uploadValues\n          this.popupValues = popupValues\n          this.radioValues = radioValues\n          this.multiSelectValues = multiSelectValues\n          this.searchSelectValues = searchSelectValues\n\n          // 更新form表单的值\n          this.$nextTick(() => {\n            this.updateFormValues()\n          })\n        })\n      }\n    },\n    columns: {\n      immediate: true,\n      handler(columns) {\n        // 兼容IE\n        this.getElementPromise('tbody').then(() => {\n          columns.forEach(column => {\n            if (column.type === FormTypes.select || column.type === FormTypes.list_multi || column.type === FormTypes.sel_search) {\n              // 兼容 旧版本 options\n              if (column.options instanceof Array) {\n                column.options = column.options.map(item => {\n                  if (item) {\n                    return {\n                      ...item,\n                      text: item.text || item.title,\n                      title: item.text || item.title\n                    }\n                  }\n                  return {}\n                })\n              }\n              if (column.dictCode) {\n                this._loadDictConcatToOptions(column)\n              }\n            }\n          })\n        })\n      }\n    },\n    // 当selectRowIds改变时触发事件\n    selectedRowIds(newValue) {\n      this.$emit('selectRowChange', cloneObject(newValue).map(i => this.removeCaseId(i)))\n    }\n  },\n  mounted() {\n    let vm = this\n    /** 监听滚动条事件 */\n    this.getElement('inputTable').onscroll = function (event) {\n      vm.syncScrollBar(event.target.scrollLeft)\n    }\n    this.getElement('tbody').onscroll = function (event) {\n      // vm.recalcTrHiddenItem(event.target.scrollTop)\n    }\n\n    let { thead, scrollView } = this.$refs\n    scrollView.onscroll = function (event) {\n\n      // console.log(event.target.scrollTop, ' - ', event.target.scrollLeft)\n\n      thead.scrollLeft = event.target.scrollLeft\n\n      // vm.recalcTrHiddenItem(event.target.scrollTop)\n\n      vm.recalcTrHiddenItem(event.target.scrollTop)\n\n    }\n\n  },\n  methods: {\n\n    getElement(id, noCaseId = false) {\n      if (!this.el[id]) {\n        this.el[id] = document.getElementById((noCaseId ? '' : this.caseId) + id)\n      }\n      return this.el[id]\n    },\n\n    getElementPromise(id, noCaseId = false) {\n      return new Promise((resolve) => {\n        let timer = setInterval(() => {\n          let element = this.getElement(id, noCaseId)\n          if (element) {\n            clearInterval(timer)\n            resolve(element)\n          }\n        }, 10)\n      })\n    },\n\n    /** 初始化列表 */\n    initialize() {\n      // inputValues：用来存储input表单的值\n      // 数组里的每项都是一个对象，对象里每个key都是input的rowKey，值就是input的值，其中有个id的字段来区分\n      // 示例：\n      // [{\n      //    id: \"_jet-4sp0iu-15541771111770\"\n      //    dbDefaultVal: \"aaa\",\n      //    dbFieldName: \"bbb\",\n      //    dbFieldTxt: \"ccc\",\n      //    dbLength: 32\n      // }]\n      this.inputValues = []\n      this.visibleTrEls = []\n      this.rows = []\n      this.deleteIds = []\n      this.selectValues = {}\n      this.checkboxValues = {}\n      this.jdateValues = {}\n      this.slotValues = {}\n      this.selectedRowIds = []\n      this.tooltips = {}\n      this.notPassedIds = []\n      this.uploadValues = []\n      this.popupValues = []\n      this.radioValues = []\n      this.multiSelectValues = []\n      this.searchSelectValues = []\n      this.scrollTop = 0\n      this.$nextTick(() => {\n        this.getElement('tbody').scrollTop = 0\n      })\n    },\n\n    /** 同步滚动条状态 */\n    syncScrollBar(scrollLeft) {\n      // this.style.tbody.left = `${scrollLeft}px`\n      // this.getElement('tbody').scrollLeft = scrollLeft\n    },\n    /** 重置滚动条位置，参数留空则滚动到上次记录的位置 */\n    resetScrollTop(top) {\n      let { scrollView } = this.$refs\n      if (top != null && typeof top === 'number') {\n        scrollView.scrollTop = top\n      } else {\n        scrollView.scrollTop = this.scrollTop\n      }\n    },\n    /** 重新计算需要隐藏或显示的tr */\n    recalcTrHiddenItem(top) {\n      let diff = top - this.scrollTop\n      if (diff < 0) {\n        diff = this.scrollTop - top\n      }\n      // 只有在滚动了百分之三十的行高的距离时才进行更新\n      if (diff >= this.rowHeight * 0.3) {\n        this.scrollTop = top\n        // 更新form表单的值\n        this.$nextTick(() => {\n          this.updateFormValues()\n        })\n      }\n    },\n    /** 生成id */\n    generateId(rows) {\n      if (!(rows instanceof Array)) {\n        rows = this.rows || []\n      }\n      let timestamp = new Date().getTime()\n      return `${this.caseId}${timestamp}${rows.length}`\n    },\n    /** push 一条数据 */\n    push(record, update = true, rows, insertIndex = null) {\n      if (!(rows instanceof Array)) {\n        rows = cloneObject(this.rows) || []\n      }\n\n      if (record.id == null) {\n        record.id = this.generateId(rows)\n        // let timestamp = new Date().getTime()\n        // record.id = `${this.caseId}${timestamp}${rows.length}`\n      }\n      if (record.id.indexOf(this.caseId) === -1) {\n        record.id = this.caseId + record.id\n      }\n      let row = { id: record.id }\n      let value = { id: row.id }\n      let checkboxValues = Object.assign({}, this.checkboxValues)\n      let selectValues = Object.assign({}, this.selectValues)\n      let jdateValues = Object.assign({}, this.jdateValues)\n      let slotValues = Object.assign({}, this.slotValues)\n      this.columns.forEach(column => {\n        let key = column.key\n        let inputId = key + row.id\n        // record中是否有该列的值\n        let recordHasValue = record[key] != null\n        if (column.type === FormTypes.input) {\n          value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\n\n        } else if (column.type === FormTypes.inputNumber) {\n          // 判断是否是排序字段，如果是就赋最大值\n          if (column.isOrder === true) {\n            value[key] = this.getInputNumberMaxValue(column) + 1\n          } else {\n            value[key] = recordHasValue ? record[key] : (column.defaultValue || (column.defaultValue === 0 ? 0 : ''))\n          }\n\n        } else if (column.type === FormTypes.checkbox) {\n          checkboxValues[inputId] = recordHasValue ? record[key] : column.defaultChecked\n\n        } else if (column.type === FormTypes.select) {\n          let selected = column.defaultValue\n          if (selected !== 0 && !selected) {\n            selected = undefined\n          }\n          // 判断多选\n          if (typeof selected === 'string' && (column.props || {})['mode'] === 'multiple') {\n            selected = selected.split(',')\n          }\n          selectValues[inputId] = recordHasValue ? record[key] : selected\n\n        } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n          jdateValues[inputId] = recordHasValue ? record[key] : column.defaultValue\n\n        } else if (column.type === FormTypes.slot) {\n          slotValues[inputId] = recordHasValue ? record[key] : (column.defaultValue || '')\n\n        } else {\n          value[key] = recordHasValue ? record[key] : ''\n        }\n      })\n      if (typeof insertIndex === 'number') {\n        rows.splice(insertIndex, 0, row)\n        this.inputValues.splice(insertIndex, 0, value)\n      } else {\n        rows.push(row)\n        this.inputValues.push(value)\n      }\n      this.checkboxValues = checkboxValues\n      this.selectValues = selectValues\n      this.jdateValues = jdateValues\n      this.slotValues = slotValues\n\n      if (this.dragSort) {\n        this.inputValues.forEach((item, index) => {\n          item[this.dragSortKey] = (index + 1)\n        })\n      }\n\n      if (update) {\n        this.rows = rows\n        this.$nextTick(() => {\n          this.updateFormValues()\n        })\n      }\n      return rows\n    },\n    /** 获取某一数字输入框列中的最大的值 */\n    getInputNumberMaxValue(column) {\n      let maxNum = 0\n      this.inputValues.forEach((item, index) => {\n        let val = item[column.key], num\n        try {\n          num = parseInt(val)\n        } catch {\n          num = 0\n        }\n        // 把首次循环的结果当成最大值\n        if (index === 0) {\n          maxNum = num\n        } else {\n          maxNum = (num > maxNum) ? num : maxNum\n        }\n      })\n      return maxNum\n    },\n    /** 添加一行 */\n    add(num = 1, forceScrollToBottom = false) {\n      if (num < 1) return\n      // let timestamp = new Date().getTime()\n      let rows = this.rows\n      let row\n      for (let i = 0; i < num; i++) {\n        // row = { id: `${this.caseId}${timestamp}${rows.length}` }\n        row = { id: this.generateId(rows) }\n        rows = this.push(row, false, rows)\n      }\n      this.rows = rows\n\n      this.$nextTick(() => {\n        this.updateFormValues()\n      })\n      // 触发add事件\n      this.$emit('added', {\n        row: (() => {\n          let r = Object.assign({}, row)\n          r.id = this.removeCaseId(r.id)\n          return r\n        })(),\n        target: this\n      })\n      // 设置滚动条位置\n      let tbody = this.getElement('tbody')\n      let offsetHeight = tbody.offsetHeight\n      let realScrollTop = tbody.scrollTop + offsetHeight\n      if (forceScrollToBottom === false) {\n        // 只有滚动条在底部的时候才自动滚动\n        if (!((tbody.scrollHeight - realScrollTop) <= 10)) {\n          return\n        }\n      }\n      this.$nextTick(() => {\n        tbody.scrollTop = tbody.scrollHeight\n      })\n    },\n    /**\n     * 在指定位置添加一行\n     * @param insertIndex 添加位置下标\n     * @param num 添加的行数，默认1\n     */\n    insert(insertIndex, num = 1) {\n      if (!insertIndex && num < 1) return\n      let rows = this.rows\n      let newRows = []\n      for (let i = 0; i < num; i++) {\n        let row = { id: this.generateId(rows) }\n        rows = this.push(row, false, rows, insertIndex)\n        newRows.push(row)\n      }\n      // 同步更改\n      this.rows = rows\n      this.$nextTick(() => {\n        this.recalcSortNumber()\n        this.forceUpdateFormValues()\n      })\n      // 触发 insert 事件\n      this.$emit('inserted', {\n        rows: newRows.map(row => {\n          let r = cloneObject(row)\n          r.id = this.removeCaseId(r.id)\n          return r\n        }),\n        num, insertIndex,\n        target: this\n      })\n    },\n    /** 删除被选中的行 */\n    removeSelectedRows() {\n      this.removeRows(this.selectedRowIds)\n      this.selectedRowIds = []\n    },\n    /** 删除一行或多行 */\n    removeRows(id) {\n      let ids = id\n      if (!(id instanceof Array)) {\n        if (typeof id === 'string') {\n          ids = [id]\n        } else {\n          throw  `JEditableTable.removeRows() 函数需要的参数可以是string或Array类型，但提供的却是${typeof id}`\n        }\n      }\n\n      let rows = cloneObject(this.rows)\n      ids.forEach(removeId => {\n        // 找到每个id对应的真实index并删除\n        const findAndDelete = (arr) => {\n          for (let i = 0; i < arr.length; i++) {\n            if (arr[i].id === removeId || arr[i].id === this.caseId + removeId) {\n              arr.splice(i, 1)\n              return true\n            }\n          }\n        }\n        // 找到rows对应的index，并删除\n        if (findAndDelete(rows)) {\n          // 找到values对应的index，并删除\n          findAndDelete(this.inputValues)\n          // 将caseId去除\n          let id = this.removeCaseId(removeId)\n          this.deleteIds.push(id)\n        }\n      })\n      this.rows = rows\n      this.$emit('deleted', this.getDeleteIds(), this)\n      this.$nextTick(() => {\n        // 更新formValues\n        this.updateFormValues()\n      })\n      return true\n    },\n\n    /** 获取表格表单里的值（异步版） */\n    getValuesAsync(options = {}, callback) {\n      let { validate, rowIds } = options\n      if (typeof validate !== 'boolean') validate = true\n      if (!(rowIds instanceof Array)) rowIds = null\n      // console.log('options:', { validate, rowIds })\n\n      let asyncCount = 0\n      let error = 0\n      let inputValues = cloneObject(this.inputValues)\n      let tooltips = Object.assign({}, this.tooltips)\n      let notPassedIds = cloneObject(this.notPassedIds)\n      // 用于存储合并后的值\n      let values = []\n      // 遍历inputValues来获取每行的值\n      for (let value of inputValues) {\n        let rowIdsFlag = false\n        // 如果带有rowIds，那么就只存这几行的数据\n        if (rowIds == null) {\n          rowIdsFlag = true\n        } else {\n          for (let rowId of rowIds) {\n            if (rowId === value.id || `${this.caseId}${rowId}` === value.id) {\n              rowIdsFlag = true\n              break\n            }\n          }\n        }\n\n        if (!rowIdsFlag) continue\n\n        this.columns.forEach(column => {\n          let inputId = column.key + value.id\n          if (column.type === FormTypes.checkbox) {\n            let checked = this.checkboxValues[inputId]\n            if (column.customValue instanceof Array) {\n              value[column.key] = checked ? column.customValue[0] : column.customValue[1]\n            } else {\n              value[column.key] = checked\n            }\n\n          } else if (column.type === FormTypes.select) {\n            let selected = this.selectValues[inputId]\n            if (selected instanceof Array) {\n              value[column.key] = cloneObject(selected)\n            } else {\n              value[column.key] = selected\n            }\n\n          } else if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n            value[column.key] = this.jdateValues[inputId]\n\n          } else if (column.type === FormTypes.upload) {\n            value[column.key] = cloneObject(this.uploadValues[inputId] || null)\n\n          } else if (column.type === FormTypes.image || column.type === FormTypes.file) {\n            let currUploadObj = cloneObject(this.uploadValues[inputId] || null)\n            if (currUploadObj) {\n              value[column.key] = currUploadObj['path'] || null\n            }\n\n          } else if (column.type === FormTypes.popup) {\n            if (!value[column.key]) {\n              value[column.key] = this.popupValues[inputId] || null\n            }\n          } else if (column.type === FormTypes.radio) {\n            value[column.key] = this.radioValues[inputId]\n          } else if (column.type === FormTypes.sel_search) {\n            value[column.key] = this.searchSelectValues[inputId]\n          } else if (column.type === FormTypes.list_multi) {\n            if (!this.multiSelectValues[inputId] || this.multiSelectValues[inputId].length === 0) {\n              value[column.key] = ''\n            } else {\n              value[column.key] = this.multiSelectValues[inputId].join(',')\n            }\n          } else if (column.type === FormTypes.slot) {\n            value[column.key] = this.slotValues[inputId]\n          }\n\n\n          // 检查表单验证\n          if (validate === true) {\n            const handleValidateOneInput = (results) => {\n              tooltips[inputId] = results[0]\n              if (tooltips[inputId].passed === false) {\n                error++\n                // if (error++ === 0) {\n                // let element = document.getElementById(inputId)\n                // while (element.className !== 'tr') {\n                //   element = element.parentElement\n                // }\n                // this.jumpToId(inputId, element)\n                // }\n              }\n              tooltips[inputId].visible = false\n              notPassedIds = results[1]\n            }\n            asyncCount++\n            let results = this.validateOneInputAsync(value[column.key], value, column, notPassedIds, false, 'getValues', (results) => {\n              handleValidateOneInput(results)\n              asyncCount--\n            })\n            handleValidateOneInput(results)\n          }\n        })\n        // 将caseId去除\n        value.id = this.removeCaseId(value.id)\n        values.push(value)\n\n      }\n\n      if (validate === true) {\n        this.tooltips = tooltips\n        this.notPassedIds = notPassedIds\n      }\n\n      const timer = setInterval(() => {\n        if (asyncCount === 0) {\n          clearInterval(timer)\n          if (typeof callback === 'function') {\n            callback({ error, values })\n          }\n        }\n      }, 50)\n\n      return { error, values }\n    },\n\n    /** 获取表格表单里的值（同步版） */\n    getValuesSync(options = {}) {\n      return this.getValuesAsync(options)\n    },\n\n    /** 获取表格表单里的值 */\n    getValues(callback, validate = true, rowIds) {\n      this.getValuesAsync({ validate, rowIds }, ({ error, values }) => {\n        if (typeof callback === 'function') {\n          callback(error, values)\n        }\n      })\n    },\n    /** getValues的Promise版 */\n    getValuesPromise(validate = true, rowIds) {\n      return new Promise((resolve, reject) => {\n        this.getValuesAsync({ validate, rowIds }, ({ error, values }) => {\n          if (error === 0) {\n            resolve(values)\n          } else {\n            reject(VALIDATE_NO_PASSED)\n          }\n        })\n      })\n    },\n    /** 获取被删除项的id */\n    getDeleteIds() {\n      return cloneObject(this.deleteIds)\n    },\n    /** 获取所有的数据，包括values、deleteIds */\n    getAll(validate) {\n      return new Promise((resolve, reject) => {\n        let deleteIds = this.getDeleteIds()\n        this.getValuesPromise(validate).then((values) => {\n          resolve({ values, deleteIds })\n        }).catch(error => {\n          reject(error)\n        })\n      })\n    },\n    /** Sync 获取所有的数据，包括values、deleteIds */\n    getAllSync(validate, rowIds) {\n      let result = this.getValuesSync({ validate, rowIds })\n      result.deleteIds = this.getDeleteIds()\n      return result\n    },\n    // slot 获取值\n    _getValueForSlot(rowId) {\n      return this.getValuesSync({ rowIds: [rowId] }).values[0]\n    },\n    _getAllValuesForSlot() {\n      return cloneObject({\n        inputValues: this.inputValues,\n        selectValues: this.selectValues,\n        checkboxValues: this.checkboxValues,\n        jdateValues: this.jdateValues,\n        slotValues: this.slotValues,\n        uploadValues: this.uploadValues,\n        popupValues: this.popupValues,\n        radioValues: this.radioValues,\n        multiSelectValues: this.multiSelectValues,\n        searchSelectValues: this.searchSelectValues,\n      })\n    },\n    /** 设置某行某列的值 */\n    setValues(values) {\n\n      values.forEach(item => {\n        let { rowKey, values: newValues } = item\n        for (let newValueKey in newValues) {\n          if (newValues.hasOwnProperty(newValueKey)) {\n            let newValue = newValues[newValueKey]\n            let edited = false // 已被修改\n            this.inputValues.forEach(value => {\n              // 在inputValues中找到了该字段\n              if (`${this.caseId}${rowKey}` === value.id) {\n                if (value.hasOwnProperty(newValueKey)) {\n                  edited = true\n                  value[newValueKey] = newValue\n                }\n              }\n            })\n            let modelKey = `${newValueKey}${this.caseId}${rowKey}`\n            // 在 selectValues 中寻找值\n            if (!edited && this.selectValues.hasOwnProperty(modelKey)) {\n              if (newValue !== 0 && !newValue) {\n                this.selectValues[modelKey] = undefined\n              } else {\n                this.selectValues[modelKey] = newValue\n              }\n              edited = true\n            }\n            // 在 checkboxValues 中寻找值\n            if (!edited && this.checkboxValues.hasOwnProperty(modelKey)) {\n              this.checkboxValues[modelKey] = newValue\n              edited = true\n            }\n            // 在 jdateValues 中寻找值\n            if (!edited && this.jdateValues.hasOwnProperty(modelKey)) {\n              this.jdateValues[modelKey] = newValue\n              edited = true\n            }\n            // 在 slotValues 中寻找值\n            if (!edited && this.slotValues.hasOwnProperty(modelKey)) {\n              this.slotValues[modelKey] = newValue\n              edited = true\n            }\n          }\n        }\n      })\n      // 强制更新formValues\n      this.forceUpdateFormValues()\n    },\n\n    /** 跳转到指定位置 */\n    // jumpToId(id, element) {\n    //   if (element == null) {\n    //     element = document.getElementById(id)\n    //   }\n    //   if (element != null) {\n    //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n    //     this.getElement('tbody').scrollTop = element.offsetTop\n    //     console.log(this.getElement('tbody').scrollTop, element.offsetTop)\n    //   }\n    // },\n\n    /**\n     * 验证单个表单，异步版\n     *\n     * @param value 校验的值\n     * @param row 校验的行\n     * @param column 校验的列\n     * @param notPassedIds 没有通过校验的 id\n     * @param update 是否更新到vue中\n     * @param validType 校验触发的方式（input、blur等）\n     * @param callback\n     */\n    validateOneInputAsync(value, row, column, notPassedIds, update = false, validType = 'input', callback) {\n      let tooltips = Object.assign({}, this.tooltips)\n      // let notPassedIds = cloneObject(this.notPassedIds)\n      let inputId = column.key + row.id\n      tooltips[inputId] = tooltips[inputId] ? tooltips[inputId] : {}\n\n      let [passed, message] = this.validateValue(column, value)\n\n      const nextThen = res => {\n        let [passed, message] = res\n        if (passed == null) {\n          // debugger\n        }\n        if (passed == null && tooltips[inputId].visible != null) {\n          return\n        }\n        passed = passed == null ? true : passed\n        tooltips[inputId].visible = !passed\n        tooltips[inputId].passed = passed\n        let index = notPassedIds.indexOf(inputId)\n        let borderColor = null, boxShadow = null\n        if (!passed) {\n          tooltips[inputId].title = this.replaceProps(column, message)\n          borderColor = 'red'\n          boxShadow = `0 0 0 2px rgba(255, 0, 0, 0.2)`\n          if (index === -1) notPassedIds.push(inputId)\n        } else {\n          if (index !== -1) notPassedIds.splice(index, 1)\n        }\n\n        let element = document.getElementById(inputId)\n        if (element != null) {\n          // select 在 .ant-select-selection 上设置 border-color\n          if (column.type === FormTypes.select) {\n            element = element.getElementsByClassName('ant-select-selection')[0]\n          }\n          // jdate 在 input 上设置 border-color\n          if (column.type === FormTypes.date || column.type === FormTypes.datetime) {\n            element = element.getElementsByTagName('input')[0]\n          }\n          // upload 在 .ant-upload .ant-btn 上设置 border-color\n          if (column.type === FormTypes.upload || column.type === FormTypes.file || column.type === FormTypes.image) {\n            element = element.getElementsByClassName('ant-upload')[0].getElementsByClassName('ant-btn')[0]\n          }\n          element.style.borderColor = borderColor\n          element.style.boxShadow = boxShadow\n          if (element.tagName === 'SPAN') {\n            element.style.display = 'block'\n          }\n        }\n        // 是否更新到data\n        if (update) {\n          this.tooltips = tooltips\n          this.notPassedIds = notPassedIds\n        }\n\n        if (typeof callback === 'function') {\n          callback([tooltips[inputId], notPassedIds])\n        }\n\n      }\n\n      if (typeof passed === 'function') {\n        let executed = false\n        passed(validType, value, row, column, (flag, msg) => {\n          if (executed) return\n          executed = true\n          if (typeof msg === 'string') {\n            message = msg\n          }\n          if (flag == null || flag === true) {\n            nextThen([true, message])\n          } else {\n            nextThen([false, message])\n          }\n        }, this)\n      } else {\n        nextThen([passed, message])\n      }\n\n      return [tooltips[inputId], notPassedIds]\n    },\n\n    /** 验证单个表单 */\n    validateOneInput(value, row, column, notPassedIds, update = false, validType = 'input') {\n      return this.validateOneInputAsync(value, row, column, notPassedIds, update, validType)\n    },\n    /** 通过规则验证值是否正确 */\n    validateValue(column, value) {\n      let rules = column.validateRules\n      let passed = true, message = ''\n      // 判断有没有验证规则或验证规则格式正不正确，若条件不符合则默认通过\n      if (rules instanceof Array) {\n        for (let rule of rules) {\n          // 当前值是否为空\n          let isNull = (value == null || value === '')\n          // 验证规则：非空\n          if (rule.required === true && isNull) {\n            passed = false\n          } else // 使用 else-if 是为了防止一个 rule 中出现两个规则\n          // 验证规则：唯一校验\n          if (rule.unique === true || rule.pattern === 'only') {\n            let { values } = this.getValuesSync({ validate: false })\n            let findCount = 0\n            for (let val of values) {\n              if (val[column.key] === value) {\n                if (++findCount >= 2) {\n                  passed = false\n                  break\n                }\n              }\n            }\n          } else\n          // 验证规则：正则表达式\n          if (!!rule.pattern && !isNull) {\n\n            // 兼容 online 的规则\n            let foo = [\n              { title: '6到16位数字', value: 'n6-16', pattern: /\\d{6,18}/ },\n              { title: '6到16位任意字符', value: '*6-16', pattern: /^.{6,16}$/ },\n              { title: '网址', value: 'url', pattern: /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/ },\n              { title: '电子邮件', value: 'e', pattern: /^([\\w]+\\.*)([\\w]+)@[\\w]+\\.\\w{3}(\\.\\w{2}|)$/ },\n              { title: '手机号码', value: 'm', pattern: /^1[3456789]\\d{9}$/ },\n              { title: '邮政编码', value: 'p', pattern: /^[1-9]\\d{5}$/ },\n              { title: '字母', value: 's', pattern: /^[A-Z|a-z]+$/ },\n              { title: '数字', value: 'n', pattern: /^-?\\d+\\.?\\d*$/ },\n              { title: '整数', value: 'z', pattern: /^-?\\d+$/ },\n              { title: '非空', value: '*', pattern: /^.+$/ },\n              { title: '6到18位字符串', value: 's6-18', pattern: /^.{6,18}$/ },\n              { title: '金额', value: 'money', pattern: /^(([1-9][0-9]*)|([0]\\.\\d{0,2}|[1-9][0-9]*\\.\\d{0,2}))$/ },\n            ]\n            let flag = false\n            for (let item of foo) {\n              if (rule.pattern === item.value && item.pattern) {\n                passed = new RegExp(item.pattern).test(value)\n                flag = true\n                break\n              }\n            }\n            if (!flag) passed = new RegExp(rule.pattern).test(value)\n          } else\n          // 校验规则：自定义函数校验\n          if (typeof rule.handler === 'function') {\n            return [rule.handler, rule.message]\n          }\n          // 如果没有通过验证，则跳出循环。如果通过了验证，则继续验证下一条规则\n          if (!passed) {\n            message = rule.message\n            break\n          }\n        }\n      }\n      return [passed, message]\n    },\n\n    /** 动态更新表单的值 */\n    updateFormValues() {\n      let trs = this.getElement('tbody').getElementsByClassName('tr')\n      let trEls = []\n      for (let tr of trs) {\n        trEls.push(tr)\n      }\n      // 获取新增的 tr\n      let newTrEls = trEls\n      if (this.visibleTrEls.length > 0) {\n        newTrEls = []\n        for (let tr of trEls) {\n          let isNewest = true\n          for (let vtr of this.visibleTrEls) {\n            if (vtr.id === tr.id) {\n              isNewest = false\n              break\n            }\n          }\n          if (isNewest) {\n            newTrEls.push(tr)\n          }\n        }\n      }\n      this.visibleTrEls = trEls\n      // 向新增的tr中赋值\n      newTrEls.forEach(tr => {\n        let { idx } = tr.dataset\n        let value = this.inputValues[idx]\n        for (let key in value) {\n          if (value.hasOwnProperty(key)) {\n            let elid = `${key}${value.id}`\n            let el = document.getElementById(elid)\n            if (el) {\n              el.value = value[key]\n            }\n          }\n        }\n      })\n    },\n    /** 强制更新FormValues */\n    forceUpdateFormValues() {\n      this.visibleTrEls = []\n      this.updateFormValues()\n    },\n\n    /** 全选或取消全选 */\n    handleChangeCheckedAll() {\n      let selectedRowIds = []\n      if (!this.getSelectAll) {\n        this.rows.forEach(row => {\n          if ((this.disabledRowIds || []).indexOf(row.id) === -1) {\n            selectedRowIds.push(row.id)\n          }\n        })\n      }\n      this.selectedRowIds = selectedRowIds\n    },\n    /** 左侧行选择框change事件 */\n    handleChangeLeftCheckbox(event) {\n      let { id } = event.target\n\n      if ((this.disabledRowIds || []).indexOf(id) !== -1) {\n        return\n      }\n\n      let index = this.selectedRowIds.indexOf(id)\n      if (index !== -1) {\n        this.selectedRowIds.splice(index, 1)\n      } else {\n        this.selectedRowIds.push(id)\n      }\n\n    },\n    handleClickAdd() {\n      this.add()\n    },\n    handleConfirmDelete() {\n      this.removeSelectedRows()\n    },\n    handleClickClearSelection() {\n      this.clearSelection()\n    },\n    clearSelection() {\n      this.selectedRowIds = []\n    },\n    /** 用于搜索下拉框中的内容 */\n    handleSelectFilterOption(input, option, column) {\n      if (column.allowSearch === true) {\n        return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n      }\n      return true\n    },\n    /** select 搜索时的事件，用于动态添加options */\n    handleSearchSelect(value, id, row, col) {\n      if (col.allowSearch !== true && col.allowInput === true) {\n        // 是否找到了对应的项，找不到则添加这一项\n        let flag = false\n        for (let option of col.options) {\n          if (option.value.toLocaleString() === value.toLocaleString()) {\n            flag = true\n            break\n          }\n        }\n        // !!value ：不添加空值\n        if (!flag && !!value) {\n          // searchAdd 是否是通过搜索添加的\n          col.options.push({ title: value, value: value, searchAdd: true })\n        }\n\n      }\n    },\n    // blur 失去焦点\n    handleBlurSearch(value, id, row, col) {\n      if (col.allowInput === true) {\n        // 删除无用的因搜索（用户输入）而创建的项\n        if (typeof value === 'string') {\n          let indexs = []\n          col.options.forEach((option, index) => {\n            if (option.value.toLocaleString() === value.toLocaleString()) {\n              delete option.searchAdd\n            } else if (option.searchAdd === true) {\n              indexs.push(index)\n            }\n          })\n          // 翻转删除数组中的项\n          for (let index of indexs.reverse()) {\n            col.options.splice(index, 1)\n          }\n        }\n\n      }\n    },\n\n    /** 触发已拖动事件 */\n    emitDragged(oldIndex, newIndex) {\n      this.$emit('dragged', { oldIndex, newIndex, target: this })\n    },\n\n    /** 拖动结束，交换inputValue中的值 */\n    handleDragMoveEnd(event) {\n      let { oldIndex, newIndex, item: { dataset: { idx: dataIdx } } } = event\n\n      // 由于动态显示隐藏行导致index有误差，需要算出真实的index\n      let diff = Number.parseInt(dataIdx) - oldIndex\n      oldIndex += diff\n      newIndex += diff\n\n      this.rowResort(oldIndex, newIndex)\n      this.emitDragged(oldIndex, newIndex)\n    },\n\n    /** 行重新排序 */\n    rowResort(oldIndex, newIndex) {\n      const sort = (array) => {\n        // 存储旧数据，并删除旧项目\n        let temp = array[oldIndex]\n        array.splice(oldIndex, 1)\n        // 向新项目里添加旧数据\n        array.splice(newIndex, 0, temp)\n      }\n\n      sort(this.rows)\n      sort(this.inputValues)\n\n      this.recalcSortNumber()\n\n      this.forceUpdateFormValues()\n    },\n\n    /** 重新计算排序字段的数值 */\n    recalcSortNumber() {\n      if (this.dragSort) {\n        // 重置排序字段\n        this.inputValues.forEach((val, idx) => val[this.dragSortKey] = (idx + 1))\n      }\n    },\n\n    /** 当前行向上移一位 */\n    _handleRowMoveUp(rowIndex) {\n      if (rowIndex > 0) {\n        let newIndex = rowIndex - 1\n        this.rowResort(rowIndex, newIndex)\n        this.emitDragged(rowIndex, newIndex)\n      }\n    },\n\n    /** 当前行向下移一位 */\n    _handleRowMoveDown(rowIndex) {\n      if (rowIndex < (this.rows.length - 1)) {\n        let newIndex = rowIndex + 1\n        this.rowResort(rowIndex, newIndex)\n        this.emitDragged(rowIndex, newIndex)\n      }\n    },\n\n    /** 在当前行下面插入一行 */\n    _handleRowInsertDown(rowIndex) {\n      let insertIndex = (rowIndex + 1)\n      this.insert(insertIndex)\n    },\n\n    /* --- common function begin --- */\n\n    /** 鼠标移入 */\n    handleMouseoverCommono(row, column) {\n      let inputId = column.key + row.id\n      if (this.notPassedIds.indexOf(inputId) !== -1) {\n        this.showOrHideTooltip(inputId, true, true)\n      }\n    },\n    /** 鼠标移出 */\n    handleMouseoutCommono(row, column) {\n      let inputId = column.key + row.id\n      this.showOrHideTooltip(inputId, false)\n    },\n    /** input事件 */\n    handleInputCommono(target, index, row, column) {\n      let { value, dataset, selectionStart } = target\n      let type = FormTypes.input\n      let change = true\n      if (`${dataset.inputNumber}` === 'true') {\n        type = FormTypes.inputNumber\n        let replace = value.replace(/[^0-9]/g, '')\n        if (value !== replace) {\n          change = false\n          value = replace\n          target.value = replace\n          if (typeof selectionStart === 'number') {\n            target.selectionStart = selectionStart - 1\n            target.selectionEnd = selectionStart - 1\n          }\n        }\n      }\n      // 存储输入的值\n      this.inputValues[index][column.key] = value\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'input')\n\n      // 触发valueChange 事件\n      if (change) {\n        this.elemValueChange(type, row, column, value)\n      }\n    },\n    /** slot Change */\n    handleChangeSlotCommon(value, id, row, column) {\n      this.slotValues = this.bindValuesChange(value, id, 'slotValues')\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.slot, row, column, value)\n    },\n    handleBlurCommono(target, index, row, column) {\n      let { value } = target\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'blur')\n    },\n    handleChangeCheckboxCommon(event, row, column) {\n      let { id, checked } = event.target\n      this.checkboxValues = this.bindValuesChange(checked, id, 'checkboxValues')\n\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.checkbox, row, column, checked)\n    },\n    handleChangeSelectCommon(value, id, row, column) {\n      this.selectValues = this.bindValuesChange(value, id, 'selectValues')\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.select, row, column, value)\n    },\n    handleChangeJDateCommon(value, id, row, column, showTime) {\n      this.jdateValues = this.bindValuesChange(value, id, 'jdateValues')\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n\n      // 触发valueChange 事件\n      if (showTime) {\n        this.elemValueChange(FormTypes.datetime, row, column, value)\n      } else {\n        this.elemValueChange(FormTypes.date, row, column, value)\n      }\n    },\n    handleChangeUpload(info, id, row, column) {\n      let { file } = info\n      let value = {\n        name: file.name,\n        type: file.type,\n        size: file.size,\n        status: file.status,\n        percent: file.percent\n      }\n      if (column.responseName && file.response) {\n        value['responseName'] = file.response[column.responseName]\n      }\n      if (file.status == 'done') {\n        value['path'] = file.response[column.responseName]\n      }\n      this.uploadValues = this.bindValuesChange(value, id, 'uploadValues')\n    },\n    /** 记录用到数据绑定的组件的值 */\n    bindValuesChange(value, id, key) {\n      // let values = Object.assign({}, this[key])\n      // values[id] = value\n      // return values\n      this.$set(this[key], id, value)\n      return this[key]\n    },\n\n    /** 显示或隐藏tooltip */\n    showOrHideTooltip(inputId, show, force = false) {\n      if (!this.tooltips[inputId] && !force) {\n        return\n      }\n\n      let tooltip = this.tooltips[inputId] || {}\n      if (tooltip.visible !== show) {\n        tooltip.visible = show\n        this.$set(this.tooltips, inputId, tooltip)\n      }\n    },\n\n    /** value 触发valueChange事件 */\n    elemValueChange(type, rowSource, columnSource, value) {\n      let column = Object.assign({}, columnSource)\n      // 将caseId去除\n      let row = Object.assign({}, rowSource)\n      row.id = this.removeCaseId(row.id)\n      // 获取整行的数据\n      let { values } = this.getValuesSync({ validate: false, rowIds: [row.id] })\n      if (values.length > 0) {\n        Object.assign(row, values[0])\n      }\n      this.$emit('valueChange', { type, row, column, value, target: this })\n    },\n\n    /** 将caseId去除 */\n    removeCaseId(id) {\n      let remove = id.split(this.caseId)[1]\n      return remove ? remove : id\n    },\n\n    handleClickDelFile(id) {\n      this.uploadValues[id] = null\n    },\n    handleClickDownloadFile(id) {\n      let { path } = this.uploadValues[id] || {}\n      if (path) {\n        let url = window._CONFIG['staticDomainURL'] + '/' + path\n        window.open(url)\n      }\n    },\n    /** 加载数据字典并合并到 options */\n    _loadDictConcatToOptions(column) {\n      initDictOptions(column.dictCode).then((res) => {\n        if (res.success) {\n          let newOptions = (column.options || [])// .concat(res.result)\n          res.result.forEach(item => {\n            for (let option of newOptions) if (option.value === item.value) return\n            newOptions.push(item)\n          })\n          column.options = newOptions\n        } else {\n          console.group(`JEditableTable 查询字典(${column.dictCode})发生异常`)\n          console.log(res.message)\n          console.groupEnd()\n        }\n      })\n    },\n\n    /* --- common function end --- */\n\n    /* --- 以下是辅助方法，多用于动态构造页面中的数据 --- */\n\n    /** 辅助方法：打印日志 */\n    log: console.log,\n\n    getVM() {\n      return this\n    },\n\n    /** 辅助方法：指定a-select 和 j-data 的父容器 */\n    getParentContainer(node) {\n      let element = (() => {\n        // nodeType 8\t: Comment\t: 注释\n        if (this.$el && this.$el.nodeType !== 8) {\n          return this.$el\n        }\n        let doc = document.getElementById(this.caseId + 'inputTable')\n        if (doc != null) {\n          return doc\n        }\n        return node.parentNode.parentNode.parentNode.parentNode.parentNode.parentNode\n      })()\n\n      // 递归判断是否带有 overflow: hidden；的父元素\n      const ifParent = (child) => {\n        let currentOverflow = null\n        if (child['currentStyle']) {\n          currentOverflow = child['currentStyle']['overflow']\n        } else if (window.getComputedStyle) {\n          currentOverflow = window.getComputedStyle(child)['overflow']\n        }\n        if (currentOverflow != null) {\n          if (currentOverflow === 'hidden') {\n            // 找到了带有 hidden 的标签，判断它的父级是否还有 hidden，直到遇到完全没有 hidden 或 body 的时候才停止递归\n            let temp = ifParent(child.parentNode)\n            return temp != null ? temp : child.parentNode\n          } else\n          // 当前标签没有 hidden ，如果有父级并且父级不是 body 的话就继续递归判断父级\n          if (child.parentNode && child.parentNode.tagName.toLocaleLowerCase() !== 'body') {\n            return ifParent(child.parentNode)\n          } else {\n            // 直到 body 都没有遇到有 hidden 的标签\n            return null\n          }\n        } else {\n          return child\n        }\n      }\n\n      let temp = ifParent(element)\n      return (temp != null) ? temp : element\n    },\n\n    /** 辅助方法：替换${...}变量 */\n    replaceProps(col, value) {\n      if (value && typeof value === 'string') {\n        value = value.replace(/\\${title}/g, col.title)\n        value = value.replace(/\\${key}/g, col.key)\n        value = value.replace(/\\${defaultValue}/g, col.defaultValue)\n      }\n      return value\n    },\n\n    /** view辅助方法：构建 tr style */\n    buildTrStyle(index) {\n      return {\n        'top': `${rowHeight * index}px`\n      }\n    },\n    /** view辅助方法：构建 td style */\n    buildTdStyle(col) {\n      const isEmptyWidth = (column) => (column.type === FormTypes.hidden || column.width === '0px' || column.width === '0' || column.width === 0)\n\n      let style = {}\n      // 计算宽度\n      if (col.width) {\n        style['width'] = col.width\n      } else if (this.columns) {\n        style['width'] = `${(100 - 4 * 2) / (this.columns.filter(column => !isEmptyWidth(column))).length}%`\n      } else {\n        style['width'] = '120px'\n      }\n      // checkbox 居中显示\n      let isCheckbox = col.type === FormTypes.checkbox\n      if (isCheckbox) {\n        style['align-items'] = 'center'\n        style['text-align'] = 'center'\n        style['padding-left'] = '0'\n        style['padding-right'] = '0'\n      }\n      if (isEmptyWidth(col)) {\n        style['padding-left'] = '0'\n        style['padding-right'] = '0'\n      }\n      return style\n    },\n    /** view辅助方法：构造props */\n    buildProps(row, col) {\n      let props = {}\n      // 解析props\n      if (typeof col.props === 'object') {\n        for (let prop in col.props) {\n          if (col.props.hasOwnProperty(prop)) {\n            props[prop] = this.replaceProps(col, col.props[prop])\n          }\n        }\n      }\n      // 判断select是否允许输入\n      if (col.type === FormTypes.select && (col.allowInput === true || col.allowSearch === true)) {\n        props['showSearch'] = true\n      }\n\n      // 判断是否是禁用的列\n      props['disabled'] = (typeof col['disabled'] === 'boolean' ? col['disabled'] : props['disabled'])\n\n      // 判断是否为禁用的行\n      if (props['disabled'] !== true) {\n        props['disabled'] = ((this.disabledRowIds || []).indexOf(row.id) !== -1)\n      }\n\n      // 判断是否禁用全部组件\n      if (this.disabled === true) {\n        props['disabled'] = true\n      }\n\n      return props\n    },\n    /** upload 辅助方法：获取 headers */\n    uploadGetHeaders(row, column) {\n      let headers = {}\n      if (column.token === true) {\n        headers['X-Access-Token'] = this.accessToken\n      }\n      return headers\n    },\n    /** 上传请求地址 */\n    getUploadAction(value) {\n      if (!value) {\n        return window._CONFIG['domianURL'] + '/sys/common/upload'\n      } else {\n        return value\n      }\n    },\n    /** 预览图片地址 */\n    getCellImageView(id) {\n      let currUploadObj = this.uploadValues[id] || null\n      if (currUploadObj && currUploadObj['path']) {\n        return window._CONFIG['staticDomainURL'] + '/' + currUploadObj['path']\n      } else {\n        return ''\n      }\n    },\n    /** popup回调 */\n    popupCallback(value, others, id, row, column, index) {\n      // 存储输入的值\n      this.popupValues[id] = value\n      if (others) {\n        Object.keys(others).map((key) => {\n          this.inputValues[index][key] = others[key]\n        })\n      }\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n      // 触发valueChange 事件\n      this.elemValueChange('input', row, column, value)\n      // 更新form表单的值\n      this.$nextTick(() => {\n        this.forceUpdateFormValues()\n      })\n    },\n    /** popup输入框回显 */\n    getPopupValue(id) {\n      return this.popupValues[id]\n    },\n    handleRadioChange(value, id, row, column) {\n      this.radioValues = this.bindValuesChange(value, id, 'radioValues')\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.radio, row, column, value)\n    },\n    handleMultiSelectChange(value, id, row, column) {\n      this.multiSelectValues = this.bindValuesChange(value, id, 'multiSelectValues')\n      // 做单个表单验证\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n      // 触发valueChange 事件\n      this.elemValueChange(FormTypes.list_multi, row, column, value)\n    },\n    handleSearchSelectChange(value, id, row, column) {\n      this.searchSelectValues = this.bindValuesChange(value, id, 'searchSelectValues')\n      this.validateOneInput(value, row, column, this.notPassedIds, true, 'change')\n      this.elemValueChange(FormTypes.sel_search, row, column, value)\n    },\n    filterOption(input, option) {\n      return option.componentOptions.children[0].text.toLowerCase().indexOf(input.toLowerCase()) >= 0\n    },\n\n\n  }\n}\n",null]}