{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\views\\modules\\online\\cgform\\auto\\OnlCgformAutoList.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\views\\modules\\online\\cgform\\auto\\OnlCgformAutoList.vue","mtime":1618453704979},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { HrefJump } from '@/mixins/OnlAutoListMixin'\nimport { postAction,getAction,deleteAction,downFile } from '@/api/manage'\nimport { filterMultiDictText } from '@/components/dict/JDictSelectUtil'\nimport { cloneObject, filterObj } from '@/utils/util'\nimport JImportModal from '@/components/jeecg/JImportModal'\nimport JSuperQuery from '@comp/jeecg/JSuperQuery'\nimport ButtonExpHandler from './ButtonExpHandler'\n\nexport default {\n  name: 'OnlCgFormAutoList',\n  mixins: [HrefJump],\n  components: {\n    JSuperQuery,\n    JImportModal,\n  },\n  data() {\n    return {\n      code: '',\n      description: '在线报表功能测试页面',\n      currentTableName:\"\",\n      url: {\n        getQueryInfo:'/online/cgform/api/getQueryInfo/',\n        getColumns: '/online/cgform/api/getColumns/',\n        getData: '/online/cgform/api/getData/',\n        optPre:\"/online/cgform/api/form/\",\n        exportXls:'/online/cgform/api/exportXls/',\n        buttonAction:'/online/cgform/api/doButton',\n      },\n      flowCodePre:\"onl_\",\n      isorter:{\n        column: 'createTime',\n        order: 'desc',\n      },\n      //dictOptions:{fieldName:[]}\n      dictOptions:{\n\n      },\n      cgButtonLinkList:[],\n      cgButtonList:[],\n      queryInfo:[],\n      // 查询参数，多个页面的查询参数用 code 作为键来区分\n      queryParamsMap: {},\n      toggleSearchStatus:false,\n      table: {\n        loading: true,\n        scroll:{x:false},\n        // 表头\n        columns: [],\n        //数据集\n        dataSource: [],\n        // 选择器\n        selectedRowKeys: [],\n        selectionRows: [],\n        // 分页参数\n        pagination: {\n\n        }\n      },\n      metaPagination:{\n        current: 1,\n        pageSize: 10,\n        pageSizeOptions: ['10', '20', '30'],\n        showTotal: (total, range) => {\n          return range[0] + '-' + range[1] + ' 共' + total + '条'\n        },\n        showQuickJumper: true,\n        showSizeChanger: true,\n        total: 0\n      },\n      actionColumn:{\n        title: '操作',\n        dataIndex: 'action',\n        scopedSlots: { customRender: 'action' },\n        fixed:\"right\",\n        align:\"center\",\n        width:150\n      },\n      formTemplate:\"99\",\n      EnhanceJS:'',\n      hideColumns:[],\n      buttonSwitch:{\n        add:true,\n        update:true,\n        delete:true,\n        batch_delete:true,\n        import:true,\n        export:true,\n        detail:true\n      },\n      hasBpmStatus:false,\n      checkboxFlag:false,\n      // 高级查询\n      superQuery: {\n        // 字段列表\n        fieldList: [],\n        // 查询参数\n        params: '',\n        // 查询条件拼接方式 'and' or 'or'\n        matchType: 'and'\n      }\n    }\n  },\n  created() {\n    this.initAutoList();\n  },\n  mounted(){\n    this.cgButtonJsHandler('mounted')\n  },\n  watch: {\n    '$route'() {\n      // 刷新参数放到这里去触发，就可以刷新相同界面了\n      this.initAutoList()\n    }\n  },\n  computed:{\n    rowSelectionConfig:function() {\n      if(!this.checkboxFlag){\n        return null\n      }\n      return {\n        fixed:true,\n        selectedRowKeys:this.table.selectedRowKeys,\n        onChange: this.handleChangeInTableSelect\n      }\n    },\n    queryParam: {\n      get() {\n        return this.queryParamsMap[this.code]\n      },\n      set(newVal) {\n        this.$set(this.queryParamsMap, this.code, newVal)\n      }\n    }\n  },\n  methods: {\n    hasBpmStatusFilter(){\n      var columnObjs = this.table.columns;\n      let columns = [];\n      for (var item of columnObjs) {\n        columns.push(item.dataIndex);\n      }\n      if(columns.includes('bpm_status')||columns.includes('BPM_STATUS')){\n        this.hasBpmStatus = true;\n      }else{\n        this.hasBpmStatus = false;\n      }\n    },\n    initQueryInfo(){\n      getAction(`${this.url.getQueryInfo}${this.code}`).then((res)=>{\n        console.log(\"--onlineList-获取查询条件配置\",res);\n        if(res.success){\n          this.queryInfo = res.result\n        }else{\n          this.$message.warning(res.message)\n        }\n      })\n    },\n    initAutoList(){\n      if(!this.$route.params.code){\n        return false\n      }\n      // 清空高级查询条件\n      this.superQuery.params = ''\n      if (this.$refs.superQuery) {\n        this.$refs.superQuery.handleReset()\n      }\n\n      this.table.loading = true\n      this.code = this.$route.params.code\n      if (!this.queryParam) {\n        this.queryParam = {}\n      }\n      getAction(`${this.url.getColumns}${this.code}`).then((res)=>{\n        console.log(\"--onlineList-加载动态列>>\",res);\n        if(res.success){\n          if(res.result.checkboxFlag == 'Y'){\n            this.checkboxFlag = true\n          }else{\n            this.checkboxFlag = false\n          }\n\n          if(res.result.paginationFlag=='Y'){\n            this.table.pagination = {...this.metaPagination}\n          }else{\n            this.table.pagination = false\n          }\n\n          this.fieldHrefSlots = res.result.fieldHrefSlots\n          this.dictOptions = res.result.dictOptions\n          this.formTemplate = res.result.formTemplate\n          this.description = res.result.description\n          this.currentTableName = res.result.currentTableName\n          this.initCgButtonList(res.result.cgButtonList)\n          this.initCgEnhanceJs(res.result.enhanceJs)\n          this.initButtonSwitch(res.result.hideColumns)\n          let currColumns = res.result.columns\n          for(let a=0;a<currColumns.length;a++){\n            if(currColumns[a].customRender){\n              let dictCode = currColumns[a].customRender;\n              let replaceFlag = '_replace_text_';\n              if(dictCode.startsWith(replaceFlag)){\n                let textFieldName = dictCode.replace(replaceFlag,'')\n                currColumns[a].customRender=(text,record)=>{\n                  return record[textFieldName]\n                }\n              }else{\n                currColumns[a].customRender=(text)=>{\n                  return filterMultiDictText(this.dictOptions[dictCode], text);\n                }\n              }\n            }\n          }\n          if(res.result.scrollFlag==1){\n            this.table.scroll = { x :'115%' }\n          }else{\n            this.table.scroll = { x :false }\n          }\n          currColumns.push(this.actionColumn);\n          this.table.columns = [...currColumns]\n          this.hasBpmStatusFilter();\n          this.loadData();\n          this.initQueryInfo();\n          //加载新路由，清空checkbox选中\n          this.table.selectedRowKeys = [];\n        }else{\n          this.$message.warning(res.message)\n        }\n      })\n    },\n    loadData(arg){\n      if(this.table.pagination){\n        if(arg==1){\n          this.table.pagination.current=1\n        }\n        this.table.loading = true\n        let params = this.getQueryParams();//查询条件\n        console.log(\"--onlineList-查询条件-->\",params)\n        getAction(`${this.url.getData}${this.code}`,params).then((res)=>{\n          console.log(\"--onlineList-列表数据\",res)\n          if(res.success){\n            let result = res.result;\n            if(Number(result.total)>0){\n              this.table.pagination.total = Number(result.total)\n              this.table.dataSource = result.records\n            }else{\n              this.table.pagination.total=0;\n              this.table.dataSource=[]\n              //this.$message.warning(\"查无数据\")\n            }\n          }else{\n            this.$message.warning(res.message)\n          }\n        }).finally(() => {\n          this.table.loading = false\n        })\n      }else{\n        this.loadDataNoPage()\n      }\n    },\n    loadDataNoPage(){\n      this.table.loading = true\n      let param = this.getQueryParams()//查询条件\n      param['pageSize'] = -521;\n      getAction(`${this.url.getData}${this.code}`,filterObj(param)).then((res)=>{\n        console.log(\"--onlineList-列表数据\",res)\n        if(res.success){\n          let result = res.result;\n          if(Number(result.total)>0){\n            this.table.dataSource = result.records\n          }else{\n            this.table.dataSource=[]\n          }\n        }else{\n          this.$message.warning(res.message)\n        }\n      }).finally(() => {\n        this.table.loading = false\n      })\n    },\n    getQueryParams() {\n      let param = Object.assign({}, this.queryParam,this.isorter);\n      param.pageNo = this.table.pagination.current;\n      param.pageSize = this.table.pagination.pageSize;\n      param.superQueryMatchType = this.superQuery.matchType\n      param.superQueryParams = encodeURIComponent(this.superQuery.params)\n      return filterObj(param);\n    },\n    handleChangeInTableSelect(selectedRowKeys, selectionRows) {\n      this.table.selectedRowKeys = selectedRowKeys\n      this.table.selectionRows = selectionRows\n      this.selectedRowKeys = selectedRowKeys\n    },\n    handleTableChange(pagination, filters, sorter){\n      //TODO 筛选\n      if (Object.keys(sorter).length>0){\n        this.isorter.column = sorter.field;\n        this.isorter.order = \"ascend\"==sorter.order?\"asc\":\"desc\"\n      }\n      this.table.pagination = pagination;\n      this.loadData();\n    },\n    handleAdd(){\n      this.cgButtonJsHandler('beforeAdd')\n      this.$refs.modal.add(this.formTemplate);\n    },\n    handleImportXls(){\n      this.$refs.importModal.show()\n    },\n    importOk(){\n      this.loadData(1)\n    },\n    handleExportXls2(){\n      let param = this.queryParam;\n      if(this.table.selectedRowKeys && this.table.selectedRowKeys.length>0){\n        param['selections'] = this.table.selectedRowKeys.join(\",\")\n      }\n      let paramsStr = encodeURI(JSON.stringify(param));\n      console.log('paramsStr: ' + paramsStr)\n      let url = window._CONFIG['domianURL']+this.url.exportXls+this.code+\"?paramsStr=\"+paramsStr\n      window.location.href = url;\n    },\n    handleExportXls(){\n      let param = this.queryParam;\n      if(this.table.selectedRowKeys && this.table.selectedRowKeys.length>0){\n        param['selections'] = this.table.selectedRowKeys.join(\",\")\n      }\n      console.log(\"导出参数\",param)\n      let paramsStr = JSON.stringify(filterObj(param));\n      downFile(this.url.exportXls+this.code,{paramsStr:paramsStr}).then((data)=>{\n        if (!data) {\n          this.$message.warning(\"文件下载失败\")\n          return\n        }\n        if (typeof window.navigator.msSaveBlob !== 'undefined') {\n          window.navigator.msSaveBlob(new Blob([data]), this.description+'.xls')\n        }else{\n          let url = window.URL.createObjectURL(new Blob([data]))\n          let link = document.createElement('a')\n          link.style.display = 'none'\n          link.href = url\n          link.setAttribute('download', this.description+'.xls')\n          document.body.appendChild(link)\n          link.click()\n          document.body.removeChild(link); //下载完成移除元素\n          window.URL.revokeObjectURL(url); //释放掉blob对象\n        }\n      })\n    },\n    handleEdit(record){\n      this.cgButtonLinkHandler(record,\"beforeEdit\",\"js\")\n      this.$refs.modal.edit(this.formTemplate,record.id);\n    },\n    showLinkButton(item,record){\n      let btn = new ButtonExpHandler(item.exp,record);\n      return btn.show;\n    },\n    handleDetail(record){\n      this.$refs.modal.detail(this.formTemplate,record.id);\n    },\n    handleDeleteOne(record){\n      this.cgButtonLinkHandler(record,\"beforeDelete\",\"js\")\n      this.handleDelete(record.id)\n    },\n    handleDelete(id){\n      deleteAction(this.url.optPre+this.code+\"/\"+id).then((res)=>{\n        if(res.success){\n          this.$message.success(res.message)\n          this.loadData()\n        }else{\n          this.$message.warning(res.message)\n        }\n      })\n    },\n\n    handleFormSuccess(){\n      this.loadData()\n    },\n    // 查询完 schema 后，生成高级查询的字段列表\n    handleGetSchema(schema) {\n      if (schema && schema.properties) {\n        let setField = (array, field) => {\n          let type = field.type || 'string'\n          type = (type === 'inputNumber' ? 'number' : type)\n          array.push({\n            type: type,\n            value: field.key,\n            text: field.title,\n            // 额外字典参数\n            dictCode: field.dictCode,\n            dictTable: field.dictTable,\n            dictText: field.dictText,\n            options: field.enum || field.options,\n            order: field.order,\n          })\n        }\n        let fieldList = []\n        for (let key in schema.properties) {\n          if (!schema.properties.hasOwnProperty(key)) {\n            continue\n          }\n          let field = schema.properties[key]\n          // tab = 子表\n          if (field.view === 'tab') {\n            let subTable = {\n              type: 'sub-table',\n              value: field.key,\n              text: field.describe,\n              children: []\n            }\n            for (let column of field.columns) {\n              setField(subTable.children, column)\n            }\n            fieldList.push(subTable)\n          } else {\n            field.key = key\n            setField(fieldList, field)\n          }\n        }\n        // 冒泡排序\n        for (let i = 0; i < fieldList.length; i++) {\n          for (let j = i + 1; j < fieldList.length; j++) {\n            let temp1 = fieldList[i]\n            let temp2 = fieldList[j]\n            if (temp1.order > temp2.order) {\n              fieldList[i] = temp2\n              fieldList[j] = temp1\n            }\n          }\n        }\n        this.superQuery.fieldList = fieldList\n      }\n    },\n    onClearSelected(){\n      this.table.selectedRowKeys = []\n      this.table.selectionRows = []\n    },\n    getImgView(text){\n      if(text && text.indexOf(\",\")>0){\n        text = text.substring(0,text.indexOf(\",\"))\n      }\n      return window._CONFIG['staticDomainURL']+\"/\"+text\n    },\n    downloadRowFile(text){\n      if(!text){\n        this.$message.warning(\"未知的文件\")\n        return;\n      }\n      if(text.indexOf(\",\")>0){\n        text = text.substring(0,text.indexOf(\",\"))\n      }\n      window.open(window._CONFIG['staticDomainURL']+\"/\"+text);//TODO 下载的方法\n    },\n    handleDelBatch(){\n      if(this.table.selectedRowKeys.length<=0){\n        this.$message.warning('请选择一条记录！');\n        return false;\n      }else{\n        let ids = \"\";\n        let that = this;\n        that.table.selectedRowKeys.forEach(function(val) {\n          ids+=val+\",\";\n        });\n        that.$confirm({\n          title:\"确认删除\",\n          content:\"是否删除选中数据?\",\n          onOk: function(){\n            that.handleDelete(ids)\n            that.onClearSelected();\n          }\n        });\n      }\n    },\n\n    searchByquery(){\n      this.loadData(1);\n    },\n    searchReset(){\n      this.queryParam = {}\n      this.loadData(1);\n    },\n    handleToggleSearch(){\n      this.toggleSearchStatus = !this.toggleSearchStatus;\n    },\n    getFormatDate(text){\n      if(!text){\n        return ''\n      }\n      let a = text;\n      if(a.length>10){\n        a = a.substring(0,10);\n      }\n      return a;\n    },\n    getImportUrl(){\n      return '/online/cgform/api/importXls/'+this.code\n    },\n    initCgEnhanceJs(enhanceJs){\n      //console.log(\"--onlineList-js增强\",enhanceJs)\n      if(enhanceJs){\n        let Obj = eval (\"(\" + enhanceJs + \")\");\n        this.EnhanceJS = new Obj(getAction,postAction,deleteAction);\n        this.cgButtonJsHandler('created')\n      }else{\n        this.EnhanceJS = ''\n      }\n    },\n    initCgButtonList(btnList){\n      let linkArr = []\n      let buttonArr = []\n      if(btnList && btnList.length>0){\n        for(let i=0;i<btnList.length;i++){\n          let temp = btnList[i]\n          if(temp.buttonStyle=='button'){\n            buttonArr.push(temp)\n          }else if(temp.buttonStyle=='link'){\n            linkArr.push(temp)\n          }\n        }\n      }\n      this.cgButtonLinkList = [...linkArr]\n      this.cgButtonList=[...buttonArr]\n    },\n    cgButtonJsHandler(buttonCode){\n      if(this.EnhanceJS[buttonCode]){\n        this.EnhanceJS[buttonCode](this)\n      }\n    },\n    cgButtonActionHandler(buttonCode){\n      //处理自定义button的 需要配置该button自定义sql\n      if(!this.table.selectedRowKeys || this.table.selectedRowKeys.length==0){\n        this.$message.warning(\"请先选中一条记录\")\n        return false\n      }\n      if(this.table.selectedRowKeys.length>1){\n        this.$message.warning(\"请只选中一条记录\")\n        return false\n      }\n      let params = {\n        formId:this.code,\n        buttonCode:buttonCode,\n        dataId:this.table.selectedRowKeys[0]\n      }\n      console.log(\"自定义按钮请求后台参数：\",params)\n      postAction(this.url.buttonAction,params).then(res=>{\n        if(res.success){\n          this.loadData()\n          this.$message.success(\"处理完成!\")\n        }else{\n          this.$message.warning(\"处理失败!\")\n        }\n      })\n\n    },\n    cgButtonLinkHandler(record,buttonCode,optType){\n      if(optType==\"js\"){\n        if(this.EnhanceJS[buttonCode]){\n          this.EnhanceJS[buttonCode](this,record)\n        }\n      }else if(optType==\"action\"){\n        let params = {\n          formId:this.code,\n          buttonCode:buttonCode,\n          dataId:record.id\n        }\n        console.log(\"自定义按钮link请求后台参数：\",params)\n        postAction(this.url.buttonAction,params).then(res=>{\n          if(res.success){\n            this.loadData()\n            this.$message.success(\"处理完成!\")\n          }else{\n            this.$message.warning(\"处理失败!\")\n          }\n        })\n      }\n    },\n    initButtonSwitch(hideColumns){\n      Object.keys(this.buttonSwitch).forEach(key=>{\n        this.buttonSwitch[key]=true\n      })\n      if(hideColumns && hideColumns.length>0){\n        Object.keys(this.buttonSwitch).forEach(key=>{\n          if(hideColumns.indexOf(key)>=0){\n            this.buttonSwitch[key]=false\n          }\n        })\n      }\n    },\n\n    // 高级查询\n    handleSuperQuery(params, matchType) {\n      if (!params || params.length === 0) {\n        this.superQuery.params = ''\n      } else {\n        this.superQuery.params = JSON.stringify(params)\n      }\n      this.superQuery.matchType = matchType\n      this.loadData()\n    },\n\n  }\n}\n",null]}