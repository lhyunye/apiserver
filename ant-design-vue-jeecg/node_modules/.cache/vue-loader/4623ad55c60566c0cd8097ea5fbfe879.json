{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JTreeTable.vue","mtime":1618453704900},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction } from '@/api/manage'\n\nexport default {\n  name: 'JTreeTable',\n  props: {\n    rowKey: {\n      type: String,\n      default: 'id'\n    },\n    // 根据什么查询，如果传递 id 就根据 id 查询\n    queryKey: {\n      type: String,\n      default: 'parentId'\n    },\n    queryParams: {\n      type: Object,\n      default: () => ({})\n    },\n    // 查询顶级时的值，如果顶级为0，则传0\n    topValue: {\n      type: String,\n      default: null\n    },\n    columns: {\n      type: Array,\n      required: true\n    },\n    url: {\n      type: String,\n      required: true\n    },\n    childrenUrl: {\n      type: String,\n      default: null\n    },\n    tableProps: {\n      type: Object,\n      default: () => ({})\n    },\n    /** 是否在创建组件的时候就查询数据 */\n    immediateRequest: {\n      type: Boolean,\n      default: true\n    },\n    condition:{\n      type:String,\n      default:'',\n      required:false\n    }\n  },\n  data() {\n    return {\n      dataSource: [],\n      expandedRowKeys: []\n    }\n  },\n  computed: {\n    getChildrenUrl() {\n      if (this.childrenUrl) {\n        return this.childrenUrl\n      } else {\n        return this.url\n      }\n    },\n    slots() {\n      let slots = []\n      for (let column of this.columns) {\n        if (column.scopedSlots && column.scopedSlots.customRender) {\n          slots.push(column.scopedSlots.customRender)\n        }\n      }\n      return slots\n    },\n    tableAttrs() {\n      return Object.assign(this.$attrs, this.tableProps)\n    }\n  },\n  watch: {\n    queryParams: {\n      deep: true,\n      handler() {\n        this.loadData()\n      }\n    }\n  },\n  created() {\n    if (this.immediateRequest) this.loadData()\n  },\n  methods: {\n\n    /** 加载数据*/\n    loadData(id = this.topValue, first = true, url = this.url) {\n      this.$emit('requestBefore', { first })\n\n      if (first) {\n        this.expandedRowKeys = []\n      }\n\n      let params = Object.assign({}, this.queryParams || {})\n      params[this.queryKey] = id\n      if(this.condition && this.condition.length>0){\n        params['condition'] = this.condition\n      }\n\n      return getAction(url, params).then(res => {\n        let list = []\n        if (res.result instanceof Array) {\n          list = res.result\n        } else if (res.result.records instanceof Array) {\n          list = res.result.records\n        } else {\n          throw '返回数据类型不识别'\n        }\n        let dataSource = list.map(item => {\n          // 判断是否标记了带有子级\n          if (item.hasChildren === true) {\n            // 查找第一个带有dataIndex的值的列\n            let firstColumn\n            for (let column of this.columns) {\n              firstColumn = column.dataIndex\n              if (firstColumn) break\n            }\n            // 定义默认展开时显示的loading子级，实际子级数据只在展开时加载\n            let loadChild = { id: `${item.id}_loadChild`, [firstColumn]: 'loading...', isLoading: true }\n            item.children = [loadChild]\n          }\n          return item\n        })\n        if (first) {\n          this.dataSource = dataSource\n        }\n        this.$emit('requestSuccess', { first, dataSource, res })\n        return Promise.resolve(dataSource)\n      }).finally(() => this.$emit('requestFinally', { first }))\n    },\n\n    /** 点击展开图标时触发 */\n    handleExpand(expanded, record) {\n      // 判断是否是展开状态\n      if (expanded) {\n        // 判断子级的首个项的标记是否是“正在加载中”，如果是就加载数据\n        if (record.children[0].isLoading === true) {\n          this.loadData(record.id, false, this.getChildrenUrl).then(dataSource => {\n            // 处理好的数据可直接赋值给children\n            if (dataSource.length === 0) {\n              record.children = null\n            } else {\n              record.children = dataSource\n            }\n          })\n        }\n      }\n    }\n\n  }\n}\n",{"version":3,"sources":["JTreeTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"JTreeTable.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\r\n  <a-table\r\n    :rowKey=\"rowKey\"\r\n    :columns=\"columns\"\r\n    :dataSource=\"dataSource\"\r\n    :expandedRowKeys=\"expandedRowKeys\"\r\n    v-bind=\"tableAttrs\"\r\n    v-on=\"$listeners\"\r\n    @expand=\"handleExpand\"\r\n    @expandedRowsChange=\"expandedRowKeys=$event\">\r\n\r\n    <template v-for=\"(slotItem) of slots\" :slot=\"slotItem\" slot-scope=\"text, record, index\">\r\n      <slot :name=\"slotItem\" v-bind=\"{text,record,index}\"></slot>\r\n    </template>\r\n\r\n  </a-table>\r\n</template>\r\n\r\n<script>\r\n  import { getAction } from '@/api/manage'\r\n\r\n  export default {\r\n    name: 'JTreeTable',\r\n    props: {\r\n      rowKey: {\r\n        type: String,\r\n        default: 'id'\r\n      },\r\n      // 根据什么查询，如果传递 id 就根据 id 查询\r\n      queryKey: {\r\n        type: String,\r\n        default: 'parentId'\r\n      },\r\n      queryParams: {\r\n        type: Object,\r\n        default: () => ({})\r\n      },\r\n      // 查询顶级时的值，如果顶级为0，则传0\r\n      topValue: {\r\n        type: String,\r\n        default: null\r\n      },\r\n      columns: {\r\n        type: Array,\r\n        required: true\r\n      },\r\n      url: {\r\n        type: String,\r\n        required: true\r\n      },\r\n      childrenUrl: {\r\n        type: String,\r\n        default: null\r\n      },\r\n      tableProps: {\r\n        type: Object,\r\n        default: () => ({})\r\n      },\r\n      /** 是否在创建组件的时候就查询数据 */\r\n      immediateRequest: {\r\n        type: Boolean,\r\n        default: true\r\n      },\r\n      condition:{\r\n        type:String,\r\n        default:'',\r\n        required:false\r\n      }\r\n    },\r\n    data() {\r\n      return {\r\n        dataSource: [],\r\n        expandedRowKeys: []\r\n      }\r\n    },\r\n    computed: {\r\n      getChildrenUrl() {\r\n        if (this.childrenUrl) {\r\n          return this.childrenUrl\r\n        } else {\r\n          return this.url\r\n        }\r\n      },\r\n      slots() {\r\n        let slots = []\r\n        for (let column of this.columns) {\r\n          if (column.scopedSlots && column.scopedSlots.customRender) {\r\n            slots.push(column.scopedSlots.customRender)\r\n          }\r\n        }\r\n        return slots\r\n      },\r\n      tableAttrs() {\r\n        return Object.assign(this.$attrs, this.tableProps)\r\n      }\r\n    },\r\n    watch: {\r\n      queryParams: {\r\n        deep: true,\r\n        handler() {\r\n          this.loadData()\r\n        }\r\n      }\r\n    },\r\n    created() {\r\n      if (this.immediateRequest) this.loadData()\r\n    },\r\n    methods: {\r\n\r\n      /** 加载数据*/\r\n      loadData(id = this.topValue, first = true, url = this.url) {\r\n        this.$emit('requestBefore', { first })\r\n\r\n        if (first) {\r\n          this.expandedRowKeys = []\r\n        }\r\n\r\n        let params = Object.assign({}, this.queryParams || {})\r\n        params[this.queryKey] = id\r\n        if(this.condition && this.condition.length>0){\r\n          params['condition'] = this.condition\r\n        }\r\n\r\n        return getAction(url, params).then(res => {\r\n          let list = []\r\n          if (res.result instanceof Array) {\r\n            list = res.result\r\n          } else if (res.result.records instanceof Array) {\r\n            list = res.result.records\r\n          } else {\r\n            throw '返回数据类型不识别'\r\n          }\r\n          let dataSource = list.map(item => {\r\n            // 判断是否标记了带有子级\r\n            if (item.hasChildren === true) {\r\n              // 查找第一个带有dataIndex的值的列\r\n              let firstColumn\r\n              for (let column of this.columns) {\r\n                firstColumn = column.dataIndex\r\n                if (firstColumn) break\r\n              }\r\n              // 定义默认展开时显示的loading子级，实际子级数据只在展开时加载\r\n              let loadChild = { id: `${item.id}_loadChild`, [firstColumn]: 'loading...', isLoading: true }\r\n              item.children = [loadChild]\r\n            }\r\n            return item\r\n          })\r\n          if (first) {\r\n            this.dataSource = dataSource\r\n          }\r\n          this.$emit('requestSuccess', { first, dataSource, res })\r\n          return Promise.resolve(dataSource)\r\n        }).finally(() => this.$emit('requestFinally', { first }))\r\n      },\r\n\r\n      /** 点击展开图标时触发 */\r\n      handleExpand(expanded, record) {\r\n        // 判断是否是展开状态\r\n        if (expanded) {\r\n          // 判断子级的首个项的标记是否是“正在加载中”，如果是就加载数据\r\n          if (record.children[0].isLoading === true) {\r\n            this.loadData(record.id, false, this.getChildrenUrl).then(dataSource => {\r\n              // 处理好的数据可直接赋值给children\r\n              if (dataSource.length === 0) {\r\n                record.children = null\r\n              } else {\r\n                record.children = dataSource\r\n              }\r\n            })\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>"]}]}