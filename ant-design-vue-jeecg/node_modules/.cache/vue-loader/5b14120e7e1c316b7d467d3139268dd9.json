{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\tools\\HeaderNotice.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\tools\\HeaderNotice.vue","mtime":1618453704921},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getAction,putAction } from '@/api/manage'\nimport ShowAnnouncement from './ShowAnnouncement'\nimport store from '@/store/'\nimport DynamicNotice from './DynamicNotice'\n\n\nexport default {\n  name: \"HeaderNotice\",\n  components: {\n    DynamicNotice,\n    ShowAnnouncement,\n  },\n  data () {\n    return {\n      loadding: false,\n      url:{\n        listCementByUser:\"/sys/annountCement/listByUser\",\n        editCementSend:\"/sys/sysAnnouncementSend/editByAnntIdAndUserId\",\n        queryById:\"/sys/annountCement/queryById\",\n      },\n      hovered: false,\n      announcement1:[],\n      announcement2:[],\n      msg1Count:\"0\",\n      msg2Count:\"0\",\n      msg1Title:\"通知(0)\",\n      msg2Title:\"\",\n      stopTimer:false,\n      websock: null,\n      lockReconnect:false,\n      heartCheck:null,\n      formData:{},\n      openPath:''\n    }\n  },\n  computed:{\n    msgTotal () {\n      return parseInt(this.msg1Count)+parseInt(this.msg2Count);\n    }\n  },\n  mounted() {\n    this.loadData();\n    //this.timerFun();\n    this.initWebSocket();\n    this.heartCheckFun();\n  },\n  destroyed: function () { // 离开页面生命周期函数\n    this.websocketclose();\n  },\n  methods: {\n    timerFun() {\n      this.stopTimer = false;\n      let myTimer = setInterval(()=>{\n        // 停止定时器\n        if (this.stopTimer == true) {\n          clearInterval(myTimer);\n          return;\n        }\n        this.loadData()\n      },6000)\n    },\n    loadData (){\n      try {\n        // 获取系统消息\n        getAction(this.url.listCementByUser).then((res) => {\n          if (res.success) {\n            this.announcement1 = res.result.anntMsgList;\n            this.msg1Count = res.result.anntMsgTotal;\n            this.msg1Title = \"通知(\" + res.result.anntMsgTotal + \")\";\n            this.announcement2 = res.result.sysMsgList;\n            this.msg2Count = res.result.sysMsgTotal;\n            this.msg2Title = \"系统消息(\" + res.result.sysMsgTotal + \")\";\n          }\n        }).catch(error => {\n          console.log(\"系统消息通知异常\",error);//这行打印permissionName is undefined\n          this.stopTimer = true;\n          console.log(\"清理timer\");\n        });\n      } catch (err) {\n        this.stopTimer = true;\n        console.log(\"通知异常\",err);\n      }\n    },\n    fetchNotice () {\n      if (this.loadding) {\n        this.loadding = false\n        return\n      }\n      this.loadding = true\n      setTimeout(() => {\n        this.loadding = false\n      }, 200)\n    },\n    showAnnouncement(record){\n      putAction(this.url.editCementSend,{anntId:record.id}).then((res)=>{\n        if(res.success){\n          this.loadData();\n        }\n      });\n      this.hovered = false;\n      if(record.openType==='component'){\n        this.openPath = record.openPage;\n        this.formData = {id:record.busId};\n        this.$refs.showDynamNotice.detail(record.openPage);\n      }else{\n        this.$refs.ShowAnnouncement.detail(record);\n      }\n    },\n    toMyAnnouncement(){\n\n      this.$router.push({\n        path: '/isps/userAnnouncement',\n        name: 'isps-userAnnouncement'\n      });\n    },\n    modalFormOk(){\n    },\n    handleHoverChange (visible) {\n      this.hovered = visible;\n    },\n\n    initWebSocket: function () {\n      // WebSocket与普通的请求所用协议有所不同，ws等同于http，wss等同于https\n      var userId = store.getters.userInfo.id;\n      var url = window._CONFIG['domianURL'].replace(\"https://\",\"wss://\").replace(\"http://\",\"ws://\")+\"/websocket/\"+userId;\n      console.log(url);\n      this.websock = new WebSocket(url);\n      this.websock.onopen = this.websocketOnopen;\n      this.websock.onerror = this.websocketOnerror;\n      this.websock.onmessage = this.websocketOnmessage;\n      this.websock.onclose = this.websocketOnclose;\n    },\n    websocketOnopen: function () {\n      console.log(\"WebSocket连接成功\");\n      //心跳检测重置\n      this.heartCheck.reset().start();\n    },\n    websocketOnerror: function (e) {\n      console.log(\"WebSocket连接发生错误\");\n      this.reconnect();\n    },\n    websocketOnmessage: function (e) {\n      console.log(\"-----接收消息-------\",e.data);\n      var data = eval(\"(\" + e.data + \")\"); //解析对象\n      if(data.cmd == \"topic\"){\n          //系统通知\n        this.loadData();\n      }else if(data.cmd == \"user\"){\n          //用户消息\n        this.loadData();\n      }\n      //心跳检测重置\n      this.heartCheck.reset().start();\n    },\n    websocketOnclose: function (e) {\n      console.log(\"connection closed (\" + e.code + \")\");\n      this.reconnect();\n    },\n    websocketSend(text) { // 数据发送\n      try {\n        this.websock.send(text);\n      } catch (err) {\n        console.log(\"send failed (\" + err.code + \")\");\n      }\n    },\n\n    openNotification (data) {\n      var text = data.msgTxt;\n      const key = `open${Date.now()}`;\n      this.$notification.open({\n        message: '消息提醒',\n        placement:'bottomRight',\n        description: text,\n        key,\n        btn: (h)=>{\n          return h('a-button', {\n            props: {\n              type: 'primary',\n              size: 'small',\n            },\n            on: {\n              click: () => this.showDetail(key,data)\n            }\n          }, '查看详情')\n        },\n      });\n    },\n\n    reconnect() {\n      var that = this;\n      if(that.lockReconnect) return;\n      that.lockReconnect = true;\n      //没连接上会一直重连，设置延迟避免请求过多\n      setTimeout(function () {\n        console.info(\"尝试重连...\");\n        that.initWebSocket();\n        that.lockReconnect = false;\n      }, 5000);\n    },\n    heartCheckFun(){\n      var that = this;\n      //心跳检测,每20s心跳一次\n      that.heartCheck = {\n        timeout: 20000,\n        timeoutObj: null,\n        serverTimeoutObj: null,\n        reset: function(){\n          clearTimeout(this.timeoutObj);\n          //clearTimeout(this.serverTimeoutObj);\n          return this;\n        },\n        start: function(){\n          var self = this;\n          this.timeoutObj = setTimeout(function(){\n            //这里发送一个心跳，后端收到后，返回一个心跳消息，\n            //onmessage拿到返回的心跳就说明连接正常\n            that.websocketSend(\"HeartBeat\");\n            console.info(\"客户端发送心跳\");\n            //self.serverTimeoutObj = setTimeout(function(){//如果超过一定时间还没重置，说明后端主动断开了\n            //  that.websock.close();//如果onclose会执行reconnect，我们执行ws.close()就行了.如果直接执行reconnect 会触发onclose导致重连两次\n            //}, self.timeout)\n          }, this.timeout)\n        }\n      }\n    },\n\n\n    showDetail(key,data){\n      this.$notification.close(key);\n      var id = data.msgId;\n      getAction(this.url.queryById,{id:id}).then((res) => {\n        if (res.success) {\n          var record = res.result;\n          this.showAnnouncement(record);\n        }\n      })\n\n    },\n  }\n}\n",null]}