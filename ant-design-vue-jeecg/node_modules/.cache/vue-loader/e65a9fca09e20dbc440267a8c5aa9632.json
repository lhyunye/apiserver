{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JSuperQuery.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JSuperQuery.vue","mtime":1618453704898},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport * as utils from '@/utils/util'\nimport JDate from '@/components/jeecg/JDate.vue'\nimport JSelectDepart from '@/components/jeecgbiz/JSelectDepart'\nimport JSelectMultiUser from '@/components/jeecgbiz/JSelectMultiUser'\n\nexport default {\n  name: 'JSuperQuery',\n  components: { JDate, JSelectDepart, JSelectMultiUser },\n  props: {\n    /*\n     fieldList: [{\n        value:'',\n        text:'',\n        type:'',\n        dictCode:'' // 只要 dictCode 有值，无论 type 是什么，都显示为字典下拉框\n     }]\n     type:date datetime int number string\n    * */\n    fieldList: {\n      type: Array,\n      required: true\n    },\n    /*\n    * 这个回调函数接收一个数组参数 即查询条件\n    * */\n    callback: {\n      type: String,\n      required: false,\n      default: 'handleSuperQuery'\n    },\n\n    // 当前是否在加载中\n    loading: {\n      type: Boolean,\n      default: false\n    },\n\n    // 保存查询条件的唯一 code，通过该 code 区分\n    saveCode: {\n      type: String,\n      default: 'testSaveCode'\n    }\n\n  },\n  data() {\n    return {\n      fieldTreeData: [],\n\n      prompt: {\n        visible: false,\n        value: ''\n      },\n\n      visible: false,\n      queryParamsModel: [{}],\n      treeIcon: <a-icon type=\"file-text\"/>,\n      treeData: [],\n      // 保存查询条件的前缀名\n      saveCodeBefore: 'JSuperQuerySaved_',\n      selectValue: 'and',\n      superQueryFlag: false\n    }\n  },\n  watch: {\n    // 当 saveCode 变化时，重新查询已保存的条件\n    saveCode: {\n      immediate: true,\n      handler(val) {\n        let list = this.$ls.get(this.saveCodeBefore + val)\n        if (list instanceof Array) {\n          this.treeData = list.map(item => {\n            item.icon = this.treeIcon\n            return item\n          })\n        }\n      }\n    },\n    fieldList: {\n      deep: true,\n      immediate: true,\n      handler(val) {\n        let mainData = [], subData = []\n        val.forEach(item => {\n          let data = { ...item }\n          data.label = data.label || data.text\n          let hasChildren = (data.children instanceof Array)\n          data.disabled = hasChildren\n          data.selectable = !hasChildren\n          if (hasChildren) {\n            data.children = data.children.map(item2 => {\n              let child = { ...item2 }\n              child.label = child.label || child.text\n              child.label = data.label + '-' + child.label\n              child.value = data.value + ',' + child.value\n              child.val = ''\n              return child\n            })\n            data.val = ''\n            subData.push(data)\n          } else {\n            mainData.push(data)\n          }\n        })\n        this.fieldTreeData = mainData.concat(subData)\n      }\n    }\n  },\n\n  methods: {\n    show() {\n      if (!this.queryParamsModel || this.queryParamsModel.length == 0) {\n        this.queryParamsModel = [{}]\n      }\n      this.visible = true\n    },\n    handleOk() {\n      if (!this.isNullArray(this.queryParamsModel)) {\n        let event = {\n          matchType: this.selectValue,\n          params: this.removeEmptyObject(utils.cloneObject(this.queryParamsModel))\n        }\n        console.log('---高级查询参数--->', event)\n        this.emitCallback(event.params, event.matchType)\n      } else {\n        this.emitCallback()\n      }\n    },\n    emitCallback(params, matchType) {\n      this.superQueryFlag = !!params\n      this.$emit(this.callback, params, matchType)\n    },\n    handleCancel() {\n      this.close()\n    },\n    close() {\n      this.$emit('close')\n      this.visible = false\n    },\n    handleAdd() {\n      this.queryParamsModel.push({})\n    },\n    handleDel(index) {\n      this.queryParamsModel.splice(index, 1)\n    },\n    handleSelected(node, item) {\n      let { type, options, dictCode, dictTable, customReturnField } = node.dataRef\n      item['type'] = type\n      item['options'] = options\n      item['dictCode'] = dictCode\n      item['dictTable'] = dictTable\n      item['customReturnField'] = customReturnField\n      this.$set(item, 'val', undefined)\n    },\n    handleReset() {\n      this.superQueryFlag = false\n      this.queryParamsModel = [{}]\n      this.emitCallback()\n    },\n    handleSave() {\n      let queryParams = this.removeEmptyObject(utils.cloneObject(this.queryParamsModel))\n      if (this.isNullArray(queryParams)) {\n        this.$message.warning('空条件不能保存')\n      } else {\n        this.prompt.value = ''\n        this.prompt.visible = true\n      }\n    },\n    handlePromptOk() {\n\n      let { value } = this.prompt\n      // 判断有没有重名\n\n      let filterList = this.treeData.filter(i => i.title === value)\n      if (filterList.length > 0) {\n        this.$confirm({\n          content: `${value} 已存在，是否覆盖？`,\n          onOk: () => {\n            this.prompt.visible = false\n            filterList[0].records = this.removeEmptyObject(utils.cloneObject(this.queryParamsModel))\n            this.saveToLocalStore()\n            this.$message.success('保存成功')\n          }\n        })\n      } else {\n        this.prompt.visible = false\n        this.treeData.push({\n          title: value,\n          icon: this.treeIcon,\n          records: this.removeEmptyObject(utils.cloneObject(this.queryParamsModel))\n        })\n        this.saveToLocalStore()\n        this.$message.success('保存成功')\n      }\n\n\n    },\n    handleTreeSelect(idx, event) {\n      if (event.selectedNodes[0]) {\n        this.queryParamsModel = utils.cloneObject(event.selectedNodes[0].data.props.records)\n      }\n    },\n    handleTreeRightClick(args) {\n      this.$confirm({\n        content: '是否删除当前查询？',\n        onOk: () => {\n          let { node: { eventKey } } = args\n          this.treeData.splice(Number.parseInt(eventKey.substring(2)), 1)\n          this.saveToLocalStore()\n          this.$message.success('删除成功')\n        },\n      })\n    },\n\n    // 将查询保存到 LocalStore 里\n    saveToLocalStore() {\n      this.$ls.set(this.saveCodeBefore + this.saveCode, this.treeData.map(item => {\n        return { title: item.title, records: item.records }\n      }))\n    },\n\n    isNullArray(array) {\n      //判断是不是空数组对象\n      if (!array || array.length === 0) {\n        return true\n      }\n      if (array.length === 1) {\n        let obj = array[0]\n        if (!obj.field || (obj.val == null || obj.val === '') || !obj.rule) {\n          return true\n        }\n      }\n      return false\n    },\n    // 去掉数组中的空对象\n    removeEmptyObject(array) {\n      for (let i = 0; i < array.length; i++) {\n        let item = array[i]\n        if (item == null || Object.keys(item).length <= 0) {\n          array.splice(i--, 1)\n        } else {\n          // 去掉特殊属性\n          delete item.options\n        }\n      }\n      return array\n    }\n  }\n}\n",null]}