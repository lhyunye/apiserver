{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCategorySelect.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JCategorySelect.vue","mtime":1618453704892},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport { getAction } from '@/api/manage'\n\nexport default {\n  name: 'JCategorySelect',\n  props: {\n    value:{\n      type: String,\n      required: false\n    },\n    placeholder:{\n      type: String,\n      default: '请选择',\n      required: false\n    },\n    disabled:{\n      type:Boolean,\n      default:false,\n      required:false\n    },\n    condition:{\n      type:String,\n      default:'',\n      required:false\n    },\n    // 是否支持多选\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    loadTriggleChange:{\n      type: Boolean,\n      default: false,\n      required:false\n    },\n    pid:{\n      type:String,\n      default:'',\n      required:false\n    },\n    pcode:{\n      type:String,\n      default:'',\n      required:false\n    },\n    back:{\n      type:String,\n      default:'',\n      required:false\n    }\n  },\n  data () {\n    return {\n      treeValue:\"\",\n      treeData:[],\n      url:\"/sys/category/loadTreeData\",\n      view:'/sys/category/loadDictItem/',\n      tableName:\"\",\n      text:\"\",\n      code:\"\",\n\n    }\n  },\n  watch: {\n    value () {\n      this.loadItemByCode()\n    },\n    pcode(){\n      this.loadRoot();\n    }\n  },\n  created(){\n    this.validateProp().then(()=>{\n      this.loadRoot()\n      this.loadItemByCode()\n    })\n  },\n  methods: {\n    /**加载一级节点 */\n    loadRoot(){\n      let param = {\n        pid:this.pid,\n        pcode:this.pcode,\n        condition:this.condition\n      }\n      getAction(this.url,param).then(res=>{\n        if(res.success && res.result){\n          for(let i of res.result){\n            i.value = i.key\n            if(i.leaf==false){\n              i.isLeaf=false\n            }else if(i.leaf==true){\n              i.isLeaf=true\n            }\n          }\n          this.treeData = [...res.result]\n        }else{\n          console.log(\"树一级节点查询结果-else\",res)\n        }\n      })\n    },\n\n    /** 数据回显*/\n    loadItemByCode(){\n      if(!this.value || this.value==\"0\"){\n        this.treeValue = []\n      }else{\n        getAction(this.view,{ids:this.value}).then(res=>{\n          console.log(124345)\n          console.log(124345,res)\n          if(res.success){\n            let values = this.value.split(',')\n            this.treeValue = res.result.map((item, index) => ({\n              key: values[index],\n              value: values[index],\n              label: item\n            }))\n            this.onLoadTriggleChange(res.result[0]);\n          }\n        })\n      }\n    },\n    onLoadTriggleChange(text){\n      //只有单选才会触发\n      if(!this.multiple && this.loadTriggleChange){\n        this.backValue(this.value,text)\n      }\n    },\n    backValue(value,label){\n      let obj = {}\n      if(this.back){\n        obj[this.back] = label\n      }\n      this.$emit('change', value, obj)\n    },\n    asyncLoadTreeData (treeNode) {\n      return new Promise((resolve) => {\n        if (treeNode.$vnode.children) {\n          resolve()\n          return\n        }\n        let pid = treeNode.$vnode.key\n        let param = {\n          pid:pid,\n          condition:this.condition\n        }\n        getAction(this.url,param).then(res=>{\n          if(res.success){\n            for(let i of res.result){\n              i.value = i.key\n              if(i.leaf==false){\n                i.isLeaf=false\n              }else if(i.leaf==true){\n                i.isLeaf=true\n              }\n            }\n            this.addChildren(pid,res.result,this.treeData)\n            this.treeData = [...this.treeData]\n          }\n          resolve()\n        })\n      })\n    },\n    addChildren(pid,children,treeArray){\n      if(treeArray && treeArray.length>0){\n        for(let item of treeArray){\n          if(item.key == pid){\n            if(!children || children.length==0){\n              item.isLeaf=true\n            }else{\n              item.children = children\n            }\n            break\n          }else{\n            this.addChildren(pid,children,item.children)\n          }\n        }\n      }\n    },\n\n    onChange(value){\n      if(!value){\n        this.$emit('change', '');\n        this.treeValue = ''\n      } else if (value instanceof Array) {\n        //this.$emit('change', value.map(item => item.value).join(','))\n        //this.treeValue = value\n      } else {\n        this.backValue(value.value,value.label)\n        this.treeValue = value\n      }\n    },\n    getCurrTreeData(){\n      return this.treeData\n    },\n    validateProp(){\n      let mycondition = this.condition\n      return new Promise((resolve,reject)=>{\n        if(!mycondition){\n          resolve();\n        }else{\n          try {\n            let test=JSON.parse(mycondition);\n            if(typeof test == 'object' && test){\n              resolve()\n            }else{\n              this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\n              reject()\n            }\n          } catch(e) {\n            this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\n            reject()\n          }\n        }\n      })\n    }\n  },\n  //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n",{"version":3,"sources":["JCategorySelect.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAifile":"JCategorySelect.vue","sourceRoot":"src/components/jeecg","sourcesContent":["<template>\r\n  <a-tree-select\r\n    allowClear\r\n    labelInValue\r\n    style=\"width: 100%\"\r\n    :disabled=\"disabled\"\r\n    :dropdownStyle=\"{ maxHeight: '400px', overflow: 'auto' }\"\r\n    :placeholder=\"placeholder\"\r\n    :loadData=\"asyncLoadTreeData\"\r\n    :value=\"treeValue\"\r\n    :treeData=\"treeData\"\r\n    :multiple=\"multiple\"\r\n    @change=\"onChange\">\r\n  </a-tree-select>\r\n</template>\r\n<script>\r\n\r\n  import { getAction } from '@/api/manage'\r\n\r\n  export default {\r\n    name: 'JCategorySelect',\r\n    props: {\r\n      value:{\r\n        type: String,\r\n        required: false\r\n      },\r\n      placeholder:{\r\n        type: String,\r\n        default: '请选择',\r\n        required: false\r\n      },\r\n      disabled:{\r\n        type:Boolean,\r\n        default:false,\r\n        required:false\r\n      },\r\n      condition:{\r\n        type:String,\r\n        default:'',\r\n        required:false\r\n      },\r\n      // 是否支持多选\r\n      multiple: {\r\n        type: Boolean,\r\n        default: false,\r\n      },\r\n      loadTriggleChange:{\r\n        type: Boolean,\r\n        default: false,\r\n        required:false\r\n      },\r\n      pid:{\r\n        type:String,\r\n        default:'',\r\n        required:false\r\n      },\r\n      pcode:{\r\n        type:String,\r\n        default:'',\r\n        required:false\r\n      },\r\n      back:{\r\n        type:String,\r\n        default:'',\r\n        required:false\r\n      }\r\n    },\r\n    data () {\r\n      return {\r\n        treeValue:\"\",\r\n        treeData:[],\r\n        url:\"/sys/category/loadTreeData\",\r\n        view:'/sys/category/loadDictItem/',\r\n        tableName:\"\",\r\n        text:\"\",\r\n        code:\"\",\r\n\r\n      }\r\n    },\r\n    watch: {\r\n      value () {\r\n        this.loadItemByCode()\r\n      },\r\n      pcode(){\r\n        this.loadRoot();\r\n      }\r\n    },\r\n    created(){\r\n      this.validateProp().then(()=>{\r\n        this.loadRoot()\r\n        this.loadItemByCode()\r\n      })\r\n    },\r\n    methods: {\r\n      /**加载一级节点 */\r\n      loadRoot(){\r\n        let param = {\r\n          pid:this.pid,\r\n          pcode:this.pcode,\r\n          condition:this.condition\r\n        }\r\n        getAction(this.url,param).then(res=>{\r\n          if(res.success && res.result){\r\n            for(let i of res.result){\r\n              i.value = i.key\r\n              if(i.leaf==false){\r\n                i.isLeaf=false\r\n              }else if(i.leaf==true){\r\n                i.isLeaf=true\r\n              }\r\n            }\r\n            this.treeData = [...res.result]\r\n          }else{\r\n            console.log(\"树一级节点查询结果-else\",res)\r\n          }\r\n        })\r\n      },\r\n\r\n      /** 数据回显*/\r\n      loadItemByCode(){\r\n        if(!this.value || this.value==\"0\"){\r\n          this.treeValue = []\r\n        }else{\r\n          getAction(this.view,{ids:this.value}).then(res=>{\r\n            console.log(124345)\r\n            console.log(124345,res)\r\n            if(res.success){\r\n              let values = this.value.split(',')\r\n              this.treeValue = res.result.map((item, index) => ({\r\n                key: values[index],\r\n                value: values[index],\r\n                label: item\r\n              }))\r\n              this.onLoadTriggleChange(res.result[0]);\r\n            }\r\n          })\r\n        }\r\n      },\r\n      onLoadTriggleChange(text){\r\n        //只有单选才会触发\r\n        if(!this.multiple && this.loadTriggleChange){\r\n          this.backValue(this.value,text)\r\n        }\r\n      },\r\n      backValue(value,label){\r\n        let obj = {}\r\n        if(this.back){\r\n          obj[this.back] = label\r\n        }\r\n        this.$emit('change', value, obj)\r\n      },\r\n      asyncLoadTreeData (treeNode) {\r\n        return new Promise((resolve) => {\r\n          if (treeNode.$vnode.children) {\r\n            resolve()\r\n            return\r\n          }\r\n          let pid = treeNode.$vnode.key\r\n          let param = {\r\n            pid:pid,\r\n            condition:this.condition\r\n          }\r\n          getAction(this.url,param).then(res=>{\r\n            if(res.success){\r\n              for(let i of res.result){\r\n                i.value = i.key\r\n                if(i.leaf==false){\r\n                  i.isLeaf=false\r\n                }else if(i.leaf==true){\r\n                  i.isLeaf=true\r\n                }\r\n              }\r\n              this.addChildren(pid,res.result,this.treeData)\r\n              this.treeData = [...this.treeData]\r\n            }\r\n            resolve()\r\n          })\r\n        })\r\n      },\r\n      addChildren(pid,children,treeArray){\r\n        if(treeArray && treeArray.length>0){\r\n          for(let item of treeArray){\r\n            if(item.key == pid){\r\n              if(!children || children.length==0){\r\n                item.isLeaf=true\r\n              }else{\r\n                item.children = children\r\n              }\r\n              break\r\n            }else{\r\n              this.addChildren(pid,children,item.children)\r\n            }\r\n          }\r\n        }\r\n      },\r\n\r\n      onChange(value){\r\n        if(!value){\r\n          this.$emit('change', '');\r\n          this.treeValue = ''\r\n        } else if (value instanceof Array) {\r\n          //this.$emit('change', value.map(item => item.value).join(','))\r\n          //this.treeValue = value\r\n        } else {\r\n          this.backValue(value.value,value.label)\r\n          this.treeValue = value\r\n        }\r\n      },\r\n      getCurrTreeData(){\r\n        return this.treeData\r\n      },\r\n      validateProp(){\r\n        let mycondition = this.condition\r\n        return new Promise((resolve,reject)=>{\r\n          if(!mycondition){\r\n            resolve();\r\n          }else{\r\n            try {\r\n              let test=JSON.parse(mycondition);\r\n              if(typeof test == 'object' && test){\r\n                resolve()\r\n              }else{\r\n                this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\r\n                reject()\r\n              }\r\n            } catch(e) {\r\n              this.$message.error(\"组件JTreeSelect-condition传值有误，需要一个json字符串!\")\r\n              reject()\r\n            }\r\n          }\r\n        })\r\n      }\r\n    },\r\n    //2.2新增 在组件内定义 指定父组件调用时候的传值属性和事件类型 这个牛逼\r\n    model: {\r\n      prop: 'value',\r\n      event: 'change'\r\n    }\r\n  }\r\n</script>\r\n"]}]}