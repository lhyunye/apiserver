{"remainingRequest":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JModal\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\src\\components\\jeecg\\JModal\\index.vue","mtime":1618453704896},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\babel-loader\\lib\\index.js","mtime":1618457261991},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1605147250913},{"path":"E:\\gitData\\wangfuj\\jeecg-boot\\ant-design-vue-jeecg\\node_modules\\vue-loader\\lib\\index.js","mtime":1618457253212}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nexport default {\n  name: 'JModal',\n  props: {\n    title: String,\n    // 可使用 .sync 修饰符\n    visible: Boolean,\n    // 是否全屏弹窗，当全屏时无论如何都会禁止 body 滚动。可使用 .sync 修饰符\n    fullscreen: {\n      type: Boolean,\n      default: true\n    },\n    // 是否允许切换全屏（允许后右上角会出现一个按钮）\n    switchFullscreen: {\n      type: Boolean,\n      default: false\n    },\n  },\n  data() {\n    return {\n      // 内部使用的 slots ，不再处理\n      usedSlots: ['title'],\n      // 实际控制是否全屏的参数\n      innerFullscreen: this.fullscreen,\n    }\n  },\n  computed: {\n    // 一些未处理的参数或特殊处理的参数绑定到 a-modal 上\n    _attrs() {\n      let attrs = { ...this.$attrs }\n      // 如果全屏就将宽度设为 100%\n      if (this.innerFullscreen) {\n        attrs['width'] = '100%'\n      }\n      return attrs\n    },\n    isNoTitle() {\n      return !this.title && !this.allSlotsKeys.includes('title')\n    },\n    isNoFooter() {\n      return this._attrs['footer'] === null\n    },\n    slotsKeys() {\n      return Object.keys(this.$slots).filter(key => !this.usedSlots.includes(key))\n    },\n    scopedSlotsKeys() {\n      return Object.keys(this.$scopedSlots).filter(key => !this.usedSlots.includes(key))\n    },\n    allSlotsKeys() {\n      return this.slotsKeys.concat(this.scopedSlotsKeys)\n    },\n    // 切换全屏的按钮图标\n    fullscreenButtonIcon() {\n      return this.innerFullscreen ? 'fullscreen' : 'fullscreen-exit'\n    },\n  },\n  watch: {\n    visible() {\n      if (this.visible) {\n        this.innerFullscreen = this.fullscreen\n      }\n    },\n    innerFullscreen(val) {\n      this.$emit('update:fullscreen', val)\n    },\n  },\n  methods: {\n\n    close() {\n      this.$emit('update:visible', false)\n    },\n\n    handleOk() {\n      this.close()\n    },\n    handleCancel() {\n      this.close()\n    },\n\n    /** 切换全屏 */\n    toggleFullscreen() {\n      this.innerFullscreen = !this.innerFullscreen\n    },\n\n  }\n}\n",null]}